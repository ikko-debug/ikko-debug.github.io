<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>django tips</title>
    <url>/2023/01/03/django-tips/</url>
    <content><![CDATA[<h4 id="创建虚拟环境stu"><a href="#创建虚拟环境stu" class="headerlink" title="创建虚拟环境stu"></a>创建虚拟环境stu</h4><p>python -m  venv stu<br>stu&#x2F;Scripts&#x2F;Activate    #启动虚拟环境<br>cd crashcourse</p>
<h4 id="新建django项目"><a href="#新建django项目" class="headerlink" title="新建django项目"></a>新建django项目</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install django</span><br><span class="line">django-admin startproject xxx</span><br></pre></td></tr></table></figure></div>

<h4 id="新建django-app"><a href="#新建django-app" class="headerlink" title="新建django app"></a>新建django app</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py startapp xxx</span><br></pre></td></tr></table></figure></div>
<h4 id="启动django"><a href="#启动django" class="headerlink" title="启动django"></a>启动django</h4><p> .\manage.py runserver<br> python manage.py runserver</p>
<h4 id="配置数据库："><a href="#配置数据库：" class="headerlink" title="配置数据库："></a>配置数据库：</h4> <div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"> DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;bookstoredb&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h4><p>python manage.py createsuperuser</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.randint(<span class="number">1</span>,<span class="number">120</span>)</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model): </span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    ==</span><br><span class="line">CREATE TABLE myapp_person (</span><br><span class="line">    <span class="string">&quot;id&quot;</span> serial NOT NULL PRIMARY KEY,</span><br><span class="line">    <span class="string">&quot;first_name&quot;</span> varchar(<span class="number">30</span>) NOT NULL,</span><br><span class="line">    <span class="string">&quot;last_name&quot;</span> varchar(<span class="number">30</span>) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<h4 id="数据库更新："><a href="#数据库更新：" class="headerlink" title="数据库更新："></a>数据库更新：</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></div>
<p>ot Found: &#x2F;favicon.ico  #访问网页时找不到图标</p>
<p>使用表单模板<br>您只需将表单实例放到模板的上下文中即可。因此，如果您的表单在上下文中叫 form ，那么  将渲染它相应的 &lt;label&gt; 和 &lt;input&gt; 元素。<a class="link"   href="https://docs.djangoproject.com/zh-hans/3.2/topics/forms/" >https://docs.djangoproject.com/zh-hans/3.2/topics/forms/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>使用表单中的值：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> form.is_valid():</span><br><span class="line">    subject = form.cleaned_data[<span class="string">&#x27;subject&#x27;</span>]</span><br><span class="line">    message = form.cleaned_data[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line">    sender = form.cleaned_data[<span class="string">&#x27;sender&#x27;</span>]</span><br><span class="line">    cc_myself = form.cleaned_data[<span class="string">&#x27;cc_myself&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    recipients = [<span class="string">&#x27;info@example.com&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> cc_myself:</span><br><span class="line">        recipients.append(sender)</span><br><span class="line"></span><br><span class="line">    send_mail(subject, message, sender, recipients)</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/thanks/&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<p>Meta 选项<br>使用内部 Meta类 来给模型赋予元数据，就像：</p>
<p>from django.db import models</p>
<p>class Ox(models.Model):<br>    horn_length &#x3D; models.IntegerField()</p>
<pre><code>class Meta:
    ordering = [&quot;horn_length&quot;]
    verbose_name_plural = &quot;oxen&quot;
</code></pre>
<p>模型的元数据即“所有不是字段的东西”，比如排序选项（ ordering ），数据库表名（ db_table ），或是阅读友好的单复数名（ verbose_name 和 verbose_name_plural ）。这些都不是必须的，并且在模型当中添加 Meta类 也完全是可选的。</p>
<p>在 模型可选参数参考 中列出了 Meta 可使用的全部选项。</p>
<h4 id="Model-signals-models信号机制"><a href="#Model-signals-models信号机制" class="headerlink" title="Model signals  -models信号机制"></a>Model signals  -models信号机制</h4><p> 2     pre_init                    # django的modal执行其构造方法前，自动触发<br> 3     post_init                   # django的modal执行其构造方法后，自动触发<br> 4     pre_save                    # django的modal对象保存前，自动触发<br> 5     post_save                   # django的modal对象保存后，自动触发<br> 6     pre_delete                  # django的modal对象删除前，自动触发<br> 7     post_delete                 # django的modal对象删除后，自动触发<br> 8     m2m_changed                 # django的modal中使用m2m字段操作第三张表（add,remove,clear）前后，自动触发<br> 9     class_prepared              # 程序启动时，检测已注册的app中modal类，对于每一个类，自动触发<br>10 Management signals<br>11     pre_migrate                 # 执行migrate命令前，自动触发  </p>
<p>12     post_migrate                # 执行migrate命令后，自动触发<br>13 Request&#x2F;response signals<br>14     request_started             # 请求到来前，自动触发<br>15     request_finished            # 请求结束后，自动触发<br>16     got_request_exception       # 请求异常后，自动触发<br>17 Test signals<br>18     setting_changed             # 使用test测试修改配置文件时，自动触发<br>19     template_rendered           # 使用test测试渲染模板时，自动触发<br>20 Database Wrappers<br>21     connection_created          # 创建数据库连接时，自动触发  </p>
<p>数据库为空需要null &#x3D; True,blank &#x3D; True<br>bootstrap将页面12等分，copy class里内容 div来确定比例<br>limit_choices_to&#x3D;{‘pid__exact’: 0}<br>province &#x3D; models.ForeignKey(<br>        “china”, blank&#x3D;True, null&#x3D;True, verbose_name&#x3D;’省份’, limit_choices_to&#x3D;{‘id__in’: [‘11’, ‘12’, ‘13’]}<br>    )</p>
]]></content>
  </entry>
  <entry>
    <title>django提升性能</title>
    <url>/2023/03/28/django%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD/</url>
    <content><![CDATA[<p>竞赛完后填坑</p>
<h2 id="redis的使用"><a href="#redis的使用" class="headerlink" title="redis的使用"></a>redis的使用</h2>]]></content>
  </entry>
  <entry>
    <title>es</title>
    <url>/2023/03/02/es/</url>
    <content><![CDATA[<h1 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h1><h2 id="类比数据库"><a href="#类比数据库" class="headerlink" title="类比数据库"></a>类比数据库</h2><p>Elasticsearch Index ~ Database<br>Types ~ Tables<br>Mapping ~ Schema</p>
<h2 id="存储模型"><a href="#存储模型" class="headerlink" title="存储模型"></a>存储模型</h2><p>Elasticsearch使用Apache Lucene，它是由Java编写的全文搜索库，由Doug Cutting（Apache Hadoop的创建者）内部开发，它使用称为倒排索引的数据结构，用于提供低延迟搜索结果。<br>    文档（document）是Elasticsearch中的数据单位，并通过对文档中的术语进行标记来创建倒排索引，创建所有唯一术语的排序列表，并将文档列表与可以找到该词的位置相关联。<br>    它非常类似于一本书背面的索引，其中包含书中的所有独特的单词和可以找到该单词的页面列表。当我们说一个文档被索引时，我们引用倒排索引。<br>    为了提高可搜索性（例如，为小写字母和小写字提供相同的结果），首先分析文档并对其进行索引。<br>    分析由两部分组成：<br><font face="微软雅黑" size=5><br>将句子标记成单词<br>将单词规范化为标准表单<br>默认情况下，Elasticsearch使用标准分析器<br>标准标记器(Standard tokenizer)，用于在单词边界上分割单词<br>小写令牌过滤器(Lowercase token filter)将单词转换为小写<br>还有许多其他分析仪可用，您可以在文档中阅读它们。<br>注意：标准分析仪也使用停止令牌过滤器，但默认情况下禁用。<br></font></p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="write-写-x2F-create-创建-操作实现原理"><a href="#write-写-x2F-create-创建-操作实现原理" class="headerlink" title="write(写)&#x2F;create(创建)操作实现原理"></a>write(写)&#x2F;create(创建)操作实现原理</h3><p>当您向协调节点发送请求以索引新文档时，将执行以下操作：</p>
<p>所有在Elasticsearch集群中的节点都包含：有关哪个分片存在于哪个节点上的元数据。协调节点(coordinating node)使用文档ID（默认）将文档路由到对应的分片。Elasticsearch将文档ID以murmur3作为散列函数进行散列，并通过索引中的主分片数量进行取模运算，以确定文档应被索引到哪个分片。<br>shard &#x3D; hash(document_id) % (num_of_primary_shards)</p>
<p>当节点接收到来自协调节点的请求时，请求被写入到translog（我们将在后续的post中间讲解translog），并将该文档添加到内存缓冲区。如果请求在主分片上成功，则请求将并行发送到副本分片。只有在所有主分片和副本分片上的translog被fsync’ed后，客户端才会收到该请求成功的确认。</p>
<p>内存缓冲区以固定的间隔刷新（默认为1秒），并将内容写入文件系统缓存中的新段。此分段的内容更尚未被fsync’ed(未被写入文件系统)，分段是打开的，内容可用于搜索。<br>translog被清空，并且文件系统缓存每隔30分钟进行一次fsync，或者当translog变得太大时进行一次fsync。这个过程在Elasticsearch中称为flush。在刷新过程中，内存缓冲区被清除，内容被写入新的文件分段(segment)。当文件分段被fsync’ed并刷新到磁盘，会创建一个新的提交点（其实就是会更新文件偏移量，文件系统会自动做这个操作）。旧的translog被删除，一个新的开始。</p>
<h3 id="Update和Delete实现原理"><a href="#Update和Delete实现原理" class="headerlink" title="Update和Delete实现原理"></a>Update和Delete实现原理</h3><p>删除和更新操作也是写操作。但是，Elasticsearch中的文档是不可变的(immutable)，因此不能删除或修改。那么，如何删除&#x2F;更新文档呢？<br>    磁盘上的每个分段(segment)都有一个.del文件与它相关联。当发送删除请求时，该文档未被真正删除，而是在.del文件中标记为已删除。此文档可能仍然能被搜索到，但会从结果中过滤掉。当分段合并时（我们将在后续的帖子中包括段合并），在.del文件中标记为已删除的文档不会被包括在新的合并段中。<br>    现在，我们来看看更新是如何工作的。创建新文档时，Elasticsearch将为该文档分配一个版本号。对文档的每次更改都会产生一个新的版本号。当执行更新时，旧版本在.del文件中被标记为已删除，并且新版本在新的分段中编入索引。旧版本可能仍然与搜索查询匹配，但是从结果中将其过滤掉。<br>    indexed&#x2F;updated文档后，我们希望执行搜索请求。我们来看看如何在Elasticsearch中执行搜索请求。</p>
<h2 id="搜索相关性-Search-Relevance"><a href="#搜索相关性-Search-Relevance" class="headerlink" title="搜索相关性(Search Relevance)"></a>搜索相关性(Search Relevance)</h2><p>相关性由Elasticsearch给予搜索结果中返回的每个文档的分数确定。用于评分的默认算法为tf &#x2F; idf（术语频率&#x2F;逆文档频率）。该术语频率测量术语出现在文档中的次数（更高频率&#x3D;更高的相关性），逆文档频率测量术语在整个索引中出现的频率占索引中文档总数的百分比（更高的频率<br>&#x3D;&#x3D;较少的相关性）。最终得分是tf-idf分数与其他因素（如词语邻近度（短语查询）），术语相似度（用于模糊查询）等的组合。</p>
<h2 id="文档映射"><a href="#文档映射" class="headerlink" title="文档映射"></a>文档映射</h2><h3 id="静态映射"><a href="#静态映射" class="headerlink" title="静态映射"></a>静态映射</h3><p>1).静态映射是在Elasticsearch中也可以事先定义好映射，包含文档的各字段类型、分词器等，这种方式称之为静态映射。</p>
<p>2).设置文档静态映射</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /es_db</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: true,</span><br><span class="line">        &quot;store&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;sex&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;,</span><br><span class="line">        &quot;index&quot;: true,</span><br><span class="line">        &quot;store&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;integer&quot;,</span><br><span class="line">        &quot;index&quot;: true,</span><br><span class="line">        &quot;store&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;book&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;index&quot;: true,</span><br><span class="line">        &quot;store&quot;: true,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">        &quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;index&quot;: true,</span><br><span class="line">        &quot;store&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">注意：book字段指定了ik分词器，如果没有装ik分词器会报错</span><br></pre></td></tr></table></figure></div>
<p>3).根据静态映射创建文档</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /es_db/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Jack&quot;,</span><br><span class="line">  &quot;sex&quot;: 1,</span><br><span class="line">  &quot;age&quot;: 25,</span><br><span class="line">  &quot;book&quot;: &quot;elasticSearch入门至精通&quot;,</span><br><span class="line">  &quot;address&quot;: &quot;广州车陂&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="动态映射"><a href="#动态映射" class="headerlink" title="动态映射"></a>动态映射</h3><p>1).Elasticsearch中不需要显示定义Mapping映射（即关系型数据库的表、字段等），在文档写入Elasticsearch时，会根据文档字段自动识别类型，这种机制称之为动态映射。<br>2).动态映射默认有一个规则，即请求中文档的什么json类型对应es中什么数值类型，也可以通过动态模板（dynamic template）来覆盖这个规则，实现自定义推测规则，具体可以参考ES官网。<br>上述字段age被推测成long类型，如果非要往age中写入string类型的值，则会报错。如下图所示</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h3><p>string类型分为keyword和text，text会分词，keyword不会。<br>text是全文搜索类型，在建立索引和搜索时，输入的文本会经过分析器处理（Analyzed），分析器会对其进行过滤，分词，转换等操作。es内置了多种分析器，而且我们可以定义分析器。<br>只有text类型才能用于match，match_phrase等搜索语句，</p>
<h3 id="ik-max-word-和-ik-smart"><a href="#ik-max-word-和-ik-smart" class="headerlink" title="ik_max_word 和 ik_smart"></a>ik_max_word 和 ik_smart</h3><p>elasticsearch搜索中文分词优化<br>1、ik_max_word</p>
<p>会将文本做最细粒度的拆分，比如会将“中华人民共和国人民大会堂”拆分为“中华人民共和国、中华人民、中华、华人、人民共和国、人民、共和国、大会堂、大会、会堂等词语。</p>
<p>2、ik_smart</p>
<p>会做最粗粒度的拆分，比如会将“中华人民共和国人民大会堂”拆分为中华人民共和国、人民大会堂。</p>
<p>两种 分词器的最佳实践： 索引时用 ik_max_word（面面俱到）， 搜索时用 ik_smart（精准匹配）。</p>
<h3 id="分词器-analyzer-和-search-analyzer"><a href="#分词器-analyzer-和-search-analyzer" class="headerlink" title="分词器 analyzer 和 search_analyzer"></a>分词器 analyzer 和 search_analyzer</h3><p>1，分词器 analyzer 的作用有二：</p>
<p>一是 插入文档时，将 text 类型字段做分词，然后插入 倒排索引。<br>二是 在查询时，先对 text  类型输入做分词， 再去倒排索引搜索。<br>2，如果想要“索引”和“查询”， 使用不同的分词器，那么 只需要在字段上 使用 search_analyzer。这样，索引只看 analyzer，查询就看 search_analyzer。</p>
<p>此外，如果没有定义，就看有没有 analyzer，再没有就去使用 ES 预设。</p>
]]></content>
  </entry>
  <entry>
    <title>markdown基本语法</title>
    <url>/2023/01/03/markdown/</url>
    <content><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 最小只有六级标题</span><br></pre></td></tr></table></figure></div>
<h1 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">**我被加粗了**</span><br></pre></td></tr></table></figure></div>
<p><strong>我被加粗了</strong></p>
<h1 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*我倾斜了了*</span><br></pre></td></tr></table></figure></div>
<p><em>我倾斜了了</em></p>
<h1 id="代码引用（实际使用中不需要括号）"><a href="#代码引用（实际使用中不需要括号）" class="headerlink" title="代码引用（实际使用中不需要括号）"></a>代码引用（实际使用中不需要括号）</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure></div>
<p>效果：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码...</span><br><span class="line">代码...</span><br><span class="line">代码...</span><br></pre></td></tr></table></figure></div>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 &#x27;&#x27;图片title&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br><span class="line">示例：</span><br><span class="line">![blockchain](http://pic3.zhimg.com/v2-9a10e6d24518578b4fe5af9ea574ccb2_r.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://pic3.zhimg.com/v2-9a10e6d24518578b4fe5af9ea574ccb2_r.jpg"
                      alt="blockchain" title="区块链"
                ></p>
]]></content>
  </entry>
  <entry>
    <title>记录navicat12连接mysql 2048</title>
    <url>/2023/03/26/navicat%E8%BF%9E%E6%8E%A5mysql-2048/</url>
    <content><![CDATA[<p>原因是mysql8版本修改了密钥认证方式，需要进行修改</p>
<p>mysql -u root -p</p>
<p>ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘password.’ PASSWORD EXPIRE NEVER;</p>
<p>这样会输出ERROR 1396 (HY000): Operation ALTER USER failed for ‘root‘@’localhost’</p>
<p>ALTER USER ‘root‘@’%’ IDENTIFIED WITH mysql_native_password BY’password’;</p>
<p>FLUSH PRIVILEGES;刷新权限</p>
]]></content>
  </entry>
  <entry>
    <title>python-tips</title>
    <url>/2023/01/06/python-tips/</url>
    <content><![CDATA[<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="python的几种拷贝方式"><a href="#python的几种拷贝方式" class="headerlink" title="python的几种拷贝方式"></a>python的几种拷贝方式</h2><h3 id="通过直接赋值的方式"><a href="#通过直接赋值的方式" class="headerlink" title="通过直接赋值的方式"></a>通过直接赋值的方式</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">old_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">new_list = old_list</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(old_list), <span class="built_in">id</span>(new_list))</span><br><span class="line"></span><br><span class="line">old_list.append(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(old_list, new_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(old_list), <span class="built_in">id</span>(new_list))</span><br><span class="line"></span><br><span class="line"><span class="number">1530306843208</span> <span class="number">1530306843208</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>] [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"><span class="number">1530306843208</span> <span class="number">1530306843208</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]  <span class="comment">#原始对象</span></span><br><span class="line"></span><br><span class="line">b = a  <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a)  <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a)  <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">5</span>)  <span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">&#x27;c&#x27;</span>)  <span class="comment">#修改对象a中的[&#x27;a&#x27;, &#x27;b&#x27;]数组对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;a = &#x27;</span>, a</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;b = &#x27;</span>, b</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c = &#x27;</span>, c</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;d = &#x27;</span>, d</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">a =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">5</span>]</span><br><span class="line">b =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">5</span>]</span><br><span class="line">c =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]]</span><br><span class="line">d =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]</span><br></pre></td></tr></table></figure></div>
<h2 id="Python的is"><a href="#Python的is" class="headerlink" title="Python的is"></a>Python的is</h2><p>is是对比地址,&#x3D;&#x3D;是对比值</p>
<h2 id="args-and-kwargs"><a href="#args-and-kwargs" class="headerlink" title="*args and **kwargs"></a>*args and **kwargs</h2><p>当你不确定你的函数里将要传递多少参数时你可以用*args.例如,它可以传递任意数量的参数:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">print_everything</span>(<span class="params">*args</span>):</span><br><span class="line">        <span class="keyword">for</span> count, thing <span class="keyword">in</span> <span class="built_in">enumerate</span>(args):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span> <span class="string">&#x27;&#123;0&#125;. &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(count, thing)</span><br><span class="line">···</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_everything(<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;cabbage&#x27;</span>)</span><br><span class="line"><span class="number">0.</span> apple</span><br><span class="line"><span class="number">1.</span> banana</span><br><span class="line"><span class="number">2.</span> cabbage</span><br></pre></td></tr></table></figure></div>
<p>相似的,**kwargs允许你使用没有事先定义的参数名:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">table_things</span>(<span class="params">**kwargs</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> name, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span> <span class="string">&#x27;&#123;0&#125; = &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(name, value)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>table_things(apple = <span class="string">&#x27;fruit&#x27;</span>, cabbage = <span class="string">&#x27;vegetable&#x27;</span>)</span><br><span class="line">cabbage = vegetable</span><br><span class="line">apple = fruit</span><br></pre></td></tr></table></figure></div>
<h2 id="round函数"><a href="#round函数" class="headerlink" title="round函数"></a>round函数</h2><p>round() 方法返回浮点数x的四舍五入值。0.120保留三位只显示0.12</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&quot;round(80.23456, 2) : &quot;</span>, <span class="built_in">round</span>(<span class="number">80.23456</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;round(100.000056, 3) : &quot;</span>, <span class="built_in">round</span>(<span class="number">100.000056</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;round(-100.000056, 3) : &quot;</span>, <span class="built_in">round</span>(-<span class="number">100.000056</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></div>
<p>print(‘%.2f’ %(all&#x2F;count))</p>
<h2 id="列表添加元素"><a href="#列表添加元素" class="headerlink" title="列表添加元素"></a>列表添加元素</h2><p>append<br>insert<br>extend</p>
<h2 id="python数据类型"><a href="#python数据类型" class="headerlink" title="python数据类型"></a>python数据类型</h2><p>1、数字类型：</p>
<p>python的数字类型包括：</p>
<p>int（长整型）<br>float（浮点型）<br>complex（复数）<br>bool（布尔型）</p>
<p>数字数据类型用于存储数值，他们是不可改变的数据类型</p>
<p>2、字符串类型：<br>python的字符串或串(String)是由数字、字母、下划线组成的一串字符</p>
<p>字符串截取：s &#x3D; a[i:j]，其中i,j可以不写，表示从位置i开始<br>字符串连接用‘+’号</p>
<p>字符串重复用’*‘号</p>
<p>3、列表类型：<br>python的列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套或者叫多维列表，可以用来表示多维数组）。列表用 [ ] 标识，是 python 最通用的复合数据类型</p>
<p>4、元组类型：<br>python的元组类似于list列表，元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表</p>
<p>元组的取值、截取、连接、重复与列表一样，</p>
<p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p>
<p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则，对于空元组直接用小括号或者tuple()表示，对于1个元素的元组，则需要在元素后面添加逗号，</p>
<p>5、字典类型：<br>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型；列表是有序的对象集合，字典是无序的对象集合；字典用”{ }”标识；字典由索引(key)和它对应的值value组成</p>
<p>字典取值，字典当中的元素是通过键来存取的，而不是通过偏移存取</p>
<p>键(key)必须使用不可变类型（数字、字符串、元组）；在同一个字典中，键(key)必须是唯一的</p>
<p>6、集合类型：<br>python的集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员；基本功能是进行成员关系测试和删除重复元素；可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典</p>
<p>set()函数只接受一个参数，且改参数类型不为数字类型</p>
<h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><p>re.match(pattern, string, flags&#x3D;0)<br>\w	匹配字母数字及下划线<br>\W	匹配非字母数字及下划线<br>matchObj &#x3D; re.match( r’(.<em>) are (.</em>?) .*’, line, re.M|re.I)</p>
<h2 id="mvc-mvt"><a href="#mvc-mvt" class="headerlink" title="mvc mvt"></a>mvc mvt</h2><p>mvc一般指MVC框架。 经典MVC模式中，M是指模型，V是视图，C则是控制器<br>T：templa<br>在MVC中</p>
<p>model是  主要是封装对数据库层的访问，对数据库中的数据进行增删改查操作</p>
<p>views 是 用于封装结果， 生程页面展示html 内容</p>
<p>controller 是用于接收请求，处理业务逻辑，与前两者交互，返回结果</p>
<p>MVT中</p>
<p>m为mvc中的功能相同，负责和数据库交互，进行数据处理</p>
<p>v是和mvc的c的意识相同 接收请求，进行业务处理，返回应答</p>
<p>t 是templa与mvc的v功能相同，负责封装构造要返回的html</p>
<h2 id="emmmm"><a href="#emmmm" class="headerlink" title="emmmm"></a>emmmm</h2><p>CREATE TABLE t_user (</p>
<p>id INT(11) NOT NULL AUTO_INCREMENT,</p>
<p>sex CHAR(2) NULL,</p>
<p>PRIMARY KEY (id),</p>
<p>CONSTRAINT sex CHECK (sex in(‘男’,’女’)));</p>
<h2 id="python切片"><a href="#python切片" class="headerlink" title="python切片"></a>python切片</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = list(range(10))</span><br><span class="line"> &gt;&gt;&gt; a</span><br><span class="line"> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"> &gt;&gt;&gt; a[:5]</span><br><span class="line"> [0, 1, 2, 3, 4]</span><br><span class="line"> &gt;&gt;&gt; a[5:]</span><br><span class="line"> [5, 6, 7, 8, 9]</span><br><span class="line"> &gt;&gt;&gt; a[2:8]</span><br><span class="line"> [2, 3, 4, 5, 6, 7]</span><br><span class="line"> &gt;&gt;&gt; a[::2]</span><br><span class="line"> [0, 2, 4, 6, 8]</span><br><span class="line"> &gt;&gt;&gt; a[::-1]</span><br><span class="line"> [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</span><br></pre></td></tr></table></figure></div>
<p> step为负数<br>当step为负数时，切片将其解释为从start出发以步长|step|逆序索引序列，此时，start和stop的截断依然遵循前述规则，但缺省发生一点变化，因为我们说过，在缺省的情况下，Python的行为是尽可能取最大区间，此时访问是逆序的，start应尽量取大，stop应尽量取小，才能保证区间最大，因此：</p>
<p>按照扩充索引范围的观点，start的缺省值是无穷大(​)，stop的缺省值是无穷小(​)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">&gt;&gt;&gt; a[5::-1]</span><br><span class="line">[5, 4, 3, 2, 1, 0]</span><br><span class="line">&gt;&gt;&gt; a[:4:-2]</span><br><span class="line">[9, 7, 5]</span><br><span class="line">&gt;&gt;&gt; a[::-1]</span><br><span class="line">[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</span><br></pre></td></tr></table></figure></div>
<h2 id="日期api"><a href="#日期api" class="headerlink" title="日期api"></a>日期api</h2><p> dd&#x3D;dd+datetime.timedelta(days&#x3D;1)#日期不断增加1天</p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>a &#x3D; list(map(int, input().split()))<br> 创建一个列表，使用 split() 函数进行分割<br> map() 函数根据提供的函数对指定序列做映射，就是转化为int型<br>split()返回分割后的字符串列表。</p>
<h2 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">start = datetime.date(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">end = datetime.date(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">days = datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> end &gt;= start:</span><br><span class="line">    <span class="keyword">if</span> start.day == <span class="number">1</span> <span class="keyword">or</span> start.weekday() == <span class="number">0</span>: </span><br><span class="line">        ans += <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ans += <span class="number">1</span></span><br><span class="line">    start += days</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure></div>
<p>datetime.date：表示日期的类，常用的属性有year, month, day<br>datetime.datetime：表示日期时间的类，常用的属性有hour, minute, second, microsecond<br>datetime.time：表示时间的类<br>datetime.timedelta：表示时间间隔，即两个时间点的间隔。在日期上做天days，小时hour，分钟，秒，毫秒，微妙的时间计算<br>datetime.tzinfo：时区的相关信息<br>date.weekday()：返回weekday，如果是星期一，返回0；如果是星期2，返回1，以此类推；</p>
<p>data.isoweekday()：返回weekday，如果是星期一，返回1；如果是星期2，返回2，以此类推；<br>date.year¶<br>在 MINYEAR 和 MAXYEAR 之间，包含边界。</p>
<p>date.month<br>1 至 12（含）</p>
<p>date.day<br>返回1到指定年月的天数间的数字。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line">today = date.today()</span><br><span class="line">today</span><br><span class="line">datetime.date(<span class="number">2007</span>, <span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line">today == date.fromtimestamp(time.time())</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">my_birthday = date(today.year, <span class="number">6</span>, <span class="number">24</span>)</span><br><span class="line"><span class="keyword">if</span> my_birthday &lt; today:</span><br><span class="line">    my_birthday = my_birthday.replace(year=today.year + <span class="number">1</span>)</span><br><span class="line">my_birthday</span><br><span class="line">datetime.date(<span class="number">2008</span>, <span class="number">6</span>, <span class="number">24</span>)</span><br><span class="line">time_to_birthday = <span class="built_in">abs</span>(my_birthday - today)</span><br><span class="line">time_to_birthday.days</span><br></pre></td></tr></table></figure></div>
<h2 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>(<span class="params">a,b</span>):</span><br><span class="line">    m=<span class="built_in">max</span>(a,b)</span><br><span class="line">    n=<span class="built_in">min</span>(a,b)</span><br><span class="line">    r=m%n</span><br><span class="line">    <span class="keyword">while</span> r!=<span class="number">0</span>:</span><br><span class="line">        m=n</span><br><span class="line">        n=r</span><br><span class="line">        r=m%n</span><br><span class="line">    <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure></div>
<h2 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="comment"># 请在此输入您的代码</span></span><br><span class="line"><span class="comment"># 表示相邻元素</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;a&#x27;</span>: [<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], <span class="string">&#x27;b&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;g&#x27;</span>], <span class="string">&#x27;c&#x27;</span>: [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;g&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;d&#x27;</span>: [<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="string">&#x27;e&#x27;</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>], <span class="string">&#x27;f&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;g&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;g&#x27;</span>: [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]&#125;</span><br><span class="line">s = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line">ans = []</span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="comment"># 先找出全排列 在去全排列里筛选</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> itertools.combinations(s, i):</span><br><span class="line">        ans.append(<span class="string">&quot;&quot;</span>.join(x))</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure></div>
<p>x的值为：<br>(‘a’,)<br>(‘b’,)<br>(‘c’,)<br>(‘d’,)<br>(‘e’,)<br>(‘f’,)<br>(‘g’,)<br>(‘a’, ‘b’)<br>(‘a’, ‘c’)<br>(‘a’, ‘d’)<br>(‘a’, ‘e’)<br>(‘a’, ‘f’)<br>(‘a’, ‘g’)<br>(‘b’, ‘c’)<br>(‘b’, ‘d’)<br>(‘b’, ‘e’)<br>(‘b’, ‘f’)<br>(‘b’, ‘g’)<br>(‘c’, ‘d’)<br>(‘c’, ‘e’)<br>(‘c’, ‘f’)<br>(‘c’, ‘g’)<br>(‘d’, ‘e’)<br>(‘d’, ‘f’)<br>(‘d’, ‘g’)<br>(‘e’, ‘f’)<br>(‘e’, ‘g’)<br>(‘f’, ‘g’)<br>(‘a’, ‘b’, ‘c’)<br>(‘a’, ‘b’, ‘d’)<br>(‘a’, ‘b’, ‘e’)<br>(‘a’, ‘b’, ‘f’)<br>(‘a’, ‘b’, ‘g’)<br>(‘a’, ‘c’, ‘d’)<br>(‘a’, ‘c’, ‘e’)<br>(‘a’, ‘c’, ‘f’)<br>(‘a’, ‘c’, ‘g’)<br>(‘a’, ‘d’, ‘e’)<br>(‘a’, ‘d’, ‘f’)<br>(‘a’, ‘d’, ‘g’)<br>(‘a’, ‘e’, ‘f’)<br>(‘a’, ‘e’, ‘g’)<br>(‘a’, ‘f’, ‘g’)<br>(‘b’, ‘c’, ‘d’)<br>(‘b’, ‘c’, ‘e’)<br>(‘b’, ‘c’, ‘f’)<br>(‘b’, ‘c’, ‘g’)<br>(‘b’, ‘d’, ‘e’)<br>(‘b’, ‘d’, ‘f’)<br>(‘b’, ‘d’, ‘g’)<br>(‘b’, ‘e’, ‘f’)<br>(‘b’, ‘e’, ‘g’)<br>(‘b’, ‘f’, ‘g’)<br>(‘c’, ‘d’, ‘e’)<br>(‘c’, ‘d’, ‘f’)<br>(‘c’, ‘d’, ‘g’)<br>(‘c’, ‘e’, ‘f’)<br>(‘c’, ‘e’, ‘g’)<br>(‘c’, ‘f’, ‘g’)<br>(‘d’, ‘e’, ‘f’)<br>(‘d’, ‘e’, ‘g’)<br>(‘d’, ‘f’, ‘g’)<br>(‘e’, ‘f’, ‘g’)<br>(‘a’, ‘b’, ‘c’, ‘d’)<br>(‘a’, ‘b’, ‘c’, ‘e’)<br>(‘a’, ‘b’, ‘c’, ‘f’)<br>(‘a’, ‘b’, ‘c’, ‘g’)<br>(‘a’, ‘b’, ‘d’, ‘e’)<br>(‘a’, ‘b’, ‘d’, ‘f’)<br>(‘a’, ‘b’, ‘d’, ‘g’)<br>(‘a’, ‘b’, ‘e’, ‘f’)<br>(‘a’, ‘b’, ‘e’, ‘g’)<br>(‘a’, ‘b’, ‘f’, ‘g’)<br>(‘a’, ‘c’, ‘d’, ‘e’)<br>(‘a’, ‘c’, ‘d’, ‘f’)<br>(‘a’, ‘c’, ‘d’, ‘g’)<br>(‘a’, ‘c’, ‘e’, ‘f’)<br>(‘a’, ‘c’, ‘e’, ‘g’)<br>(‘a’, ‘c’, ‘f’, ‘g’)<br>(‘a’, ‘d’, ‘e’, ‘f’)<br>(‘a’, ‘d’, ‘e’, ‘g’)<br>(‘a’, ‘d’, ‘f’, ‘g’)<br>(‘a’, ‘e’, ‘f’, ‘g’)<br>(‘b’, ‘c’, ‘d’, ‘e’)<br>(‘b’, ‘c’, ‘d’, ‘f’)<br>(‘b’, ‘c’, ‘d’, ‘g’)<br>(‘b’, ‘c’, ‘e’, ‘f’)<br>(‘b’, ‘c’, ‘e’, ‘g’)<br>(‘b’, ‘c’, ‘f’, ‘g’)<br>(‘b’, ‘d’, ‘e’, ‘f’)<br>(‘b’, ‘d’, ‘e’, ‘g’)<br>(‘b’, ‘d’, ‘f’, ‘g’)<br>(‘b’, ‘e’, ‘f’, ‘g’)<br>(‘c’, ‘d’, ‘e’, ‘f’)<br>(‘c’, ‘d’, ‘e’, ‘g’)<br>(‘c’, ‘d’, ‘f’, ‘g’)<br>(‘c’, ‘e’, ‘f’, ‘g’)<br>(‘d’, ‘e’, ‘f’, ‘g’)<br>(‘a’, ‘b’, ‘c’, ‘d’, ‘e’)<br>(‘a’, ‘b’, ‘c’, ‘d’, ‘f’)<br>(‘a’, ‘b’, ‘c’, ‘d’, ‘g’)<br>(‘a’, ‘b’, ‘c’, ‘e’, ‘f’)<br>(‘a’, ‘b’, ‘c’, ‘e’, ‘g’)<br>(‘a’, ‘b’, ‘c’, ‘f’, ‘g’)<br>(‘a’, ‘b’, ‘d’, ‘e’, ‘f’)<br>(‘a’, ‘b’, ‘d’, ‘e’, ‘g’)<br>(‘a’, ‘b’, ‘d’, ‘f’, ‘g’)<br>(‘a’, ‘b’, ‘e’, ‘f’, ‘g’)<br>(‘a’, ‘c’, ‘d’, ‘e’, ‘f’)<br>所以需要通过join函数处理<br>结果：[‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’, ‘g’, ‘ab’, ‘ac’, ‘ad’, ‘ae’, ‘af’, ‘ag’, ‘bc’, ‘bd’, ‘be’, ‘bf’, ‘bg’, ‘cd’, ‘ce’, ‘cf’, ‘cg’, ‘de’, ‘df’, ‘dg’, ‘ef’, ‘eg’, ‘fg’, ‘abc’, ‘abd’, ‘abe’, ‘abf’, ‘abg’, ‘acd’, ‘ace’, ‘acf’, ‘acg’, ‘ade’, ‘adf’, ‘adg’, ‘aef’, ‘aeg’, ‘afg’, ‘bcd’, ‘bce’, ‘bcf’, ‘bcg’, ‘bde’, ‘bdf’, ‘bdg’, ‘bef’, ‘beg’, ‘bfg’, ‘cde’, ‘cdf’, ‘cdg’, ‘cef’, ‘ceg’, ‘cfg’, ‘def’, ‘deg’, ‘dfg’, ‘efg’, ‘abcd’, ‘abce’, ‘abcf’, ‘abcg’, ‘abde’, ‘abdf’, ‘abdg’, ‘abef’, ‘abeg’, ‘abfg’, ‘acde’, ‘acdf’, ‘acdg’, ‘acef’, ‘aceg’, ‘acfg’, ‘adef’, ‘adeg’, ‘adfg’, ‘aefg’, ‘bcde’, ‘bcdf’, ‘bcdg’, ‘bcef’, ‘bceg’, ‘bcfg’, ‘bdef’, ‘bdeg’, ‘bdfg’, ‘befg’, ‘cdef’, ‘cdeg’, ‘cdfg’, ‘cefg’, ‘defg’, ‘abcde’, ‘abcdf’, ‘abcdg’, ‘abcef’, ‘abceg’, ‘abcfg’, ‘abdef’, ‘abdeg’, ‘abdfg’, ‘abefg’, ‘acdef’, ‘acdeg’, ‘acdfg’, ‘acefg’, ‘adefg’, ‘bcdef’, ‘bcdeg’, ‘bcdfg’, ‘bcefg’, ‘bdefg’, ‘cdefg’, ‘abcdef’, ‘abcdeg’, ‘abcdfg’, ‘abcefg’, ‘abdefg’, ‘acdefg’, ‘bcdefg’, ‘abcdefg’]</p>
<h3 id="permutations是A，combination是C"><a href="#permutations是A，combination是C" class="headerlink" title="permutations是A，combination是C"></a>permutations是A，combination是C</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"> <span class="built_in">list</span>(itertools.combinations(<span class="string">&#x27;abc&#x27;</span>, <span class="number">2</span>))</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)]</span><br><span class="line"> <span class="built_in">list</span>(itertools.permutations(<span class="string">&#x27;abc&#x27;</span>,<span class="number">2</span>))</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)]</span><br></pre></td></tr></table></figure></div>
<h2 id="蓝桥杯读入二维数组"><a href="#蓝桥杯读入二维数组" class="headerlink" title="蓝桥杯读入二维数组"></a>蓝桥杯读入二维数组</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())<span class="comment">#n为行，m为列</span></span><br><span class="line">p=[<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]<span class="comment">#将数据记录在二维列表里</span></span><br></pre></td></tr></table></figure></div>
<h2 id="二维数组定义"><a href="#二维数组定义" class="headerlink" title="二维数组定义"></a>二维数组定义</h2><p>查阅资料后发现list的浅拷贝问题，二维列表里面保存的是一维列表的地址，我这样赋值是把第一个[3]*3也就是[3,3,3]的地址复制了四遍，这个二位列表看似有了四个一维的[3,3,3]，但是其实它们在内存里都是指向一个对象，所以之后修改任意一行的其中元素，其他行的对应位置元素也会被改变。真服了，困扰老子一天<br>在 Python 中定义二维数组的正确方式应该是使用 for 循环：</p>
<p>dp &#x3D; [[0] * N for _ in range(M)]</p>
<p>不应该使用：</p>
<p>dp &#x3D; [[0] * N ] * M</p>
<p>一维数组可以用[ 0 ] ∗ N [0] * N[0]∗N 这种声明方式，但是二维数组不能用上面的声明方式，这会导致 dp 中的每行的列表是同一个 id，所以对其中一行的操作都会表现为每一行的操作。</p>
<h2 id="读取以空格分隔的一行整数"><a href="#读取以空格分隔的一行整数" class="headerlink" title="读取以空格分隔的一行整数"></a>读取以空格分隔的一行整数</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a,b,c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()) <span class="comment">#或者</span></span><br><span class="line">a,b,c = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">num_list = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="comment">#或者</span></span><br><span class="line">num_list = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br></pre></td></tr></table></figure></div>
<p>或者</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> n.split():</span><br><span class="line">    <span class="built_in">list</span>.append(<span class="built_in">int</span>(i))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">list</span> = [<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> n.split()]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"><span class="built_in">list</span>= [<span class="built_in">int</span>(num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment">## print</span></span><br><span class="line">```python</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%02d:%02d:%02d&quot;</span> % (h, m, s))</span><br></pre></td></tr></table></figure></div>
<h2 id="sort-and-sorted"><a href="#sort-and-sorted" class="headerlink" title="sort and sorted"></a>sort and sorted</h2><p>sorted() 是函数，其返回的是一个新的列表</p>
<p>x&#x3D;sorted(cars)</p>
<p>print(x) cars列表里的内容没有改变</p>
<p>cars.sort()   原列表直接进行方法调用，所以原列表进行了排序，不可逆</p>
<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="Linux常见命令："><a href="#Linux常见命令：" class="headerlink" title="Linux常见命令："></a>Linux常见命令：</h2><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>cp [options] source dest</p>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>cat（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。</p>
<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>tar -xzvf test.tar.gz 解压文件</p>
<h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>ls（英文全拼： list directory contents）命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。</p>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>Linux grep 命令用于查找文件里符合条件的字符串。</p>
<p>grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 -，则 grep 指令会从标准输入设备读取数据。</p>
<h2 id="vscode快捷键"><a href="#vscode快捷键" class="headerlink" title="vscode快捷键"></a>vscode快捷键</h2><p>ctrl k + ctrl u快速取消注释</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据导入elasticsearch</title>
    <url>/2023/04/04/mysql%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5elasticsearch/</url>
    <content><![CDATA[<p>首先创建索引：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -XPUT -u elastic:密码 IP:9200/索引名 -H &#x27;Content-Type: application/json&#x27; -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;number_of_shards&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;policy_title&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;policy_body&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>python创建索引：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> helpers</span><br><span class="line">es = Elasticsearch(hosts=[</span><br><span class="line">                   <span class="string">&#x27;&#x27;</span>])</span><br><span class="line">index_name = <span class="string">&#x27;policyend&#x27;</span></span><br><span class="line">es.indices.create(</span><br><span class="line">    index=index_name,</span><br><span class="line">    body=&#123;</span><br><span class="line">        <span class="string">&#x27;settings&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;number_of_shards&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">&#x27;number_of_replicas&#x27;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;mappings&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;properties&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;policy_title&#x27;</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;analyzer&#x27;</span>: <span class="string">&#x27;ik_max_word&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&#x27;policy_body&#x27;</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;analyzer&#x27;</span>: <span class="string">&#x27;ik_max_word&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>然后使用python导入：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> helpers</span><br><span class="line"><span class="comment"># 连接MySQL数据库</span></span><br><span class="line">cnx = pymysql.connect(user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;&#x27;</span>, host=<span class="string">&#x27;localhost&#x27;</span>, database=<span class="string">&#x27;search&#x27;</span>)</span><br><span class="line">cursor = cnx.cursor()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;连接mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行查询语句，获取数据</span></span><br><span class="line">query = <span class="string">&quot;SELECT * FROM search_policy&quot;</span></span><br><span class="line">cursor.execute(query)</span><br><span class="line">res0 = cursor.fetchall()</span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> cursor.description:</span><br><span class="line">    list1.append(row[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">tuple</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接Elasticsearch</span></span><br><span class="line">es = Elasticsearch(hosts=[<span class="string">&#x27;https://elastic:密码@IP:9200&#x27;</span>]) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;连接es&#x27;</span>)</span><br><span class="line"></span><br><span class="line">actions = []</span><br><span class="line">tb_name = <span class="string">&quot;tb_demo&quot;</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> res0:</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    data = <span class="built_in">dict</span>(<span class="built_in">zip</span>(list1, r))</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(cnt)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">try</span>:                                                </span><br><span class="line">        action = &#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&#x27;policyy&#x27;</span>, <span class="string">&quot;_source&quot;</span>:data&#125; </span><br><span class="line">        actions.append(action)</span><br><span class="line">               </span><br><span class="line">            <span class="comment"># 每1000个一组批量导入</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(actions) == <span class="number">1000</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;execute 1000 action&quot;</span>)</span><br><span class="line">            success,errors = helpers.bulk(es, actions, raise_on_error = <span class="literal">True</span>)</span><br><span class="line">            actions = []</span><br><span class="line">    <span class="keyword">except</span>:        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;traceback.format_exc():\n%s&#x27;</span> % traceback.format_exc())</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(actions) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        success,errors = helpers.bulk(es, actions, raise_on_error = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>创建搜索建议：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"><span class="keyword">from</span> elasticsearch.helpers <span class="keyword">import</span> bulk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接MySQL数据库</span></span><br><span class="line">cnx = pymysql.connect(user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;YDXcgyz123.&#x27;</span>,</span><br><span class="line">                      host=<span class="string">&#x27;localhost&#x27;</span>, database=<span class="string">&#x27;search&#x27;</span>)</span><br><span class="line">cursor = cnx.cursor()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;连接mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行查询语句，获取数据</span></span><br><span class="line">query = <span class="string">&quot;SELECT * FROM search_policy&quot;</span></span><br><span class="line">cursor.execute(query)</span><br><span class="line">res0 = cursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接Elasticsearch</span></span><br><span class="line">es = Elasticsearch(hosts=[</span><br><span class="line">                   <span class="string">&#x27;&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新的索引并定义映射，包含一个 &quot;policy_title_suggest&quot; 字段作为 Completion Suggester</span></span><br><span class="line">index_name = <span class="string">&#x27;policy_title_suggest_index&#x27;</span></span><br><span class="line">mapping = &#123;</span><br><span class="line">    <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;policy_title_suggest&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;completion&quot;</span>,  <span class="comment"># Completion Suggester 字段类型</span></span><br><span class="line">                <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">                <span class="string">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">                <span class="string">&quot;preserve_position_increments&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;preserve_separators&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;max_input_length&quot;</span>: <span class="number">50</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">es.indices.delete(index=<span class="string">&#x27;policy_title_suggest_index&#x27;</span>, ignore=[<span class="number">400</span>, <span class="number">404</span>])</span><br><span class="line"></span><br><span class="line">es.indices.create(index=index_name, body=mapping)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 MySQL 查询结果导入到 Elasticsearch 索引中，每次批量导入 5000 条文档</span></span><br><span class="line">new_docs = []</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> res0:</span><br><span class="line">    <span class="keyword">if</span> row[<span class="number">1</span>]:  <span class="comment"># 过滤掉空值的文档</span></span><br><span class="line">        doc = &#123;</span><br><span class="line">            <span class="string">&quot;_index&quot;</span>: index_name,</span><br><span class="line">            <span class="string">&quot;_id&quot;</span>: row[<span class="number">0</span>],  <span class="comment"># 假设第一列为 ID 字段作为文档的唯一标识符</span></span><br><span class="line">            <span class="string">&quot;policy_title_suggest&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;input&quot;</span>: [row[<span class="number">1</span>]],  <span class="comment"># 将第二列数据作为输入</span></span><br><span class="line">                <span class="string">&quot;weight&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        new_docs.append(doc)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count % <span class="number">5000</span> == <span class="number">0</span>:</span><br><span class="line">            bulk(es, new_docs)</span><br><span class="line">            new_docs = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入剩余的文档</span></span><br><span class="line"><span class="keyword">if</span> new_docs:</span><br><span class="line">    bulk(es, new_docs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新索引</span></span><br><span class="line">es.indices.refresh(index=index_name)</span><br></pre></td></tr></table></figure></div>
<p>搜索建议：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接 Elasticsearch</span></span><br><span class="line">es = Elasticsearch(hosts=[</span><br><span class="line">                   <span class="string">&#x27;&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义搜索关键词</span></span><br><span class="line">search_word = <span class="string">&#x27;优化&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建搜索建议的 Elasticsearch 查询体</span></span><br><span class="line">suggest_body = &#123;</span><br><span class="line">    <span class="string">&quot;suggest&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;suggestion&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;prefix&quot;</span>: search_word,</span><br><span class="line">            <span class="string">&quot;completion&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;field&quot;</span>: <span class="string">&quot;policy_title_suggest&quot;</span>,  <span class="comment"># 根据实际的字段名称进行修改</span></span><br><span class="line">                <span class="string">&quot;skip_duplicates&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">&quot;fuzzy&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;fuzziness&quot;</span>: <span class="string">&quot;AUTO&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送 Elasticsearch 查询请求</span></span><br><span class="line">response = es.search(index=<span class="string">&#x27;policy_title_suggest_index&#x27;</span>,</span><br><span class="line">                     body=suggest_body)  <span class="comment"># 根据实际的索引名称进行修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取搜索建议数据</span></span><br><span class="line">suggestions = response[<span class="string">&#x27;suggest&#x27;</span>][<span class="string">&#x27;suggestion&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;options&#x27;</span>]</span><br><span class="line">suggestion_terms = [suggestion[<span class="string">&#x27;text&#x27;</span>] <span class="keyword">for</span> suggestion <span class="keyword">in</span> suggestions]</span><br><span class="line"><span class="built_in">print</span>(suggestion_terms)</span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>django分页功能实现</title>
    <url>/2023/04/11/test/</url>
    <content><![CDATA[<p>以下是使用 Django 和 Ajax 实现分页功能的示例代码：</p>
<ol>
<li>在 <code>views.py</code> 中定义视图函数，用于返回需要分页的数据。</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> MyModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_view</span>(<span class="params">request</span>):</span><br><span class="line">    data = MyModel.objects.<span class="built_in">all</span>()</span><br><span class="line">    paginator = Paginator(data, <span class="number">10</span>)  <span class="comment"># 每页显示 10 条数据</span></span><br><span class="line">    page_number = request.GET.get(<span class="string">&#x27;page&#x27;</span>)</span><br><span class="line">    page_obj = paginator.get_page(page_number)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;my_template.html&#x27;</span>, &#123;<span class="string">&#x27;page_obj&#x27;</span>: page_obj&#125;)</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>在 <code>my_template.html</code> 中，使用 Ajax 请求获取分页数据，并通过 JavaScript 将数据展示在页面上。</li>
</ol>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- my_template.html --&gt;</span></span><br><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;my-data&quot;</span>&gt;</span></span><br><span class="line">    &#123;% for obj in page_obj %&#125;</span><br><span class="line">        <span class="comment">&lt;!-- 展示数据 --&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;my-pagination&quot;</span>&gt;</span></span><br><span class="line">    &#123;% if page_obj.has_previous %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=&#123;&#123; page_obj.previous_page_number &#125;&#125;&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current-page&quot;</span>&gt;</span>&#123;&#123; page_obj.number &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;% if page_obj.has_next %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?page=&#123;&#123; page_obj.next_page_number &#125;&#125;&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// Ajax 请求分页数据</span></span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&#x27;#my-pagination a&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">url</span>: <span class="string">&#x27;&#123;% url &quot;my_view&quot; %&#125;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>: &#123;<span class="attr">page</span>: $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]&#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&#x27;#my-data&#x27;</span>).<span class="title function_">html</span>(data);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></div>

<p>在上面的示例中，我们使用 Django 提供的 <code>Paginator</code> 类来实现分页功能，并在模板中通过 <code>has_previous</code>、<code>has_next</code> 和 <code>number</code> 等属性获取分页信息。在 JavaScript 部分，我们监听上一页和下一页的链接点击事件，并使用 <code>$.ajax</code> 函数向 Django 视图函数发送 GET 请求获取分页数据，成功后将数据显示在页面上。</p>
]]></content>
  </entry>
  <entry>
    <title>十四届蓝桥杯模拟赛</title>
    <url>/2023/03/02/%E5%8D%81%E5%9B%9B%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E6%A8%A1%E6%8B%9F%E8%B5%9B/</url>
    <content><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>请找到一个大于 2022 的最小数，这个数转换成十六进制之后，所有的数位（不含前导 0）都为字母（A 到 F）。<br>　　请将这个数的十进制形式作为答案提交。<br>AAA转化为十进制即可</p>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>在 Excel 中，列的名称使用英文字母的组合。前 26 列用一个字母，依次为 A 到 Z，接下来 26*26 列使用两个字母的组合，依次为 AA 到 ZZ。<br>　　请问第 2022 列的名称是什么？</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">q=<span class="number">2022</span>-<span class="number">26</span>*<span class="number">26</span>-<span class="number">26</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count==q:</span><br><span class="line">                <span class="built_in">print</span>(a[i],a[k],a[l])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>b y t</p>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>对于一个日期，我们可以计算出年份的各个数位上的数字之和，也可以分别计算月和日的各位数字之和。请问从 1900 年 1 月 1 日至 9999 年 12 月 31 日，总共有多少天，年份的数位数字之和等于月的数位数字之和加日的数位数字之和。<br>　　例如，2022年11月13日满足要求，因为 2+0+2+2&#x3D;(1+1)+(1+3) 。<br>　　请提交满足条件的日期的总数量。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line">begin =dt.date(<span class="number">1900</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">end = dt.date(<span class="number">9999</span>,<span class="number">12</span>,<span class="number">31</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">countx</span>(<span class="params">n</span>):</span><br><span class="line">     <span class="comment">#将数字作为字符串输入</span></span><br><span class="line">    listx = []</span><br><span class="line">    listx = <span class="built_in">list</span>(n) <span class="comment">#将字符串转换为列表</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(listx)):</span><br><span class="line">        s+= <span class="built_in">int</span>(listx[i]) <span class="comment">#将字符转换为整数型,并累加列表中的每个数字</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((end - begin).days+<span class="number">1</span>):</span><br><span class="line">    day = begin + dt.timedelta(days=i)</span><br><span class="line">    nian = <span class="built_in">str</span>(day.year)</span><br><span class="line">    w = <span class="built_in">str</span>(day.month)</span><br><span class="line">    da = <span class="built_in">str</span>(day.day)</span><br><span class="line">    count1 = countx(nian)</span><br><span class="line">    count2 = countx(da)+countx(w)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> count1 == count2:</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count) </span><br></pre></td></tr></table></figure></div>
<p>70910</p>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>小蓝有 30 个数，分别为：99, 22, 51, 63, 72, 61, 20, 88, 40, 21, 63, 30, 11, 18, 99, 12, 93, 16, 7, 53, 64, 9, 28, 84, 34, 96, 52, 82, 51, 77 。<br>　　小蓝可以在这些数中取出两个序号不同的数，共有 30*29&#x2F;2&#x3D;435 种取法。<br>　　请问这 435 种取法中，有多少种取法取出的两个数的乘积大于等于 2022 。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">99</span>, <span class="number">22</span>, <span class="number">51</span>, <span class="number">63</span>, <span class="number">72</span>, <span class="number">61</span>, <span class="number">20</span>, <span class="number">88</span>, <span class="number">40</span>, <span class="number">21</span>, <span class="number">63</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">99</span>, <span class="number">12</span>, <span class="number">93</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">53</span>, <span class="number">64</span>, <span class="number">9</span>, <span class="number">28</span>, <span class="number">84</span>, <span class="number">34</span>, <span class="number">96</span>, <span class="number">52</span>, <span class="number">82</span>, <span class="number">51</span>, <span class="number">77</span>]</span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">29</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">if</span> (a[i]*a[j])&gt;=<span class="number">2022</span>:</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure></div>
<p>189</p>
<h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>小蓝有一个 30 行 60 列的数字矩阵，矩阵中的每个数都是 0 或 1 。如果从一个标为 1 的位置可以通过上下左右走到另一个标为 1 的位置，则称两个位置连通。与某一个标为 1 的位置连通的所有位置（包括自己）组成一个连通分块。 请问矩阵中最大的连通分块有多大？</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">m,n,flag</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> n&lt;<span class="number">0</span> <span class="keyword">or</span> m&lt;<span class="number">0</span> <span class="keyword">or</span> m&gt;<span class="number">29</span> <span class="keyword">or</span> n&gt;<span class="number">59</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> flag[m][n]==<span class="number">1</span> <span class="keyword">or</span> a[m][n]==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    flag[m][n] = <span class="number">1</span>   </span><br><span class="line">    dfs(m-<span class="number">1</span>,n,flag)</span><br><span class="line">    dfs(m,n-<span class="number">1</span>,flag)</span><br><span class="line">    dfs(m+<span class="number">1</span>,n,flag)</span><br><span class="line">    dfs(m,n+<span class="number">1</span>,flag)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">m = <span class="string">&#x27;&#x27;&#x27;110010000011111110101001001001101010111011011011101001111110</span></span><br><span class="line"><span class="string">010000000001010001101100000010010110001111100010101100011110</span></span><br><span class="line"><span class="string">001011101000100011111111111010000010010101010111001000010100</span></span><br><span class="line"><span class="string">101100001101011101101011011001000110111111010000000110110000</span></span><br><span class="line"><span class="string">010101100100010000111000100111100110001110111101010011001011</span></span><br><span class="line"><span class="string">010011011010011110111101111001001001010111110001101000100011</span></span><br><span class="line"><span class="string">101001011000110100001101011000000110110110100100110111101011</span></span><br><span class="line"><span class="string">101111000000101000111001100010110000100110001001000101011001</span></span><br><span class="line"><span class="string">001110111010001011110000001111100001010101001110011010101110</span></span><br><span class="line"><span class="string">001010101000110001011111001010111111100110000011011111101010</span></span><br><span class="line"><span class="string">011111100011001110100101001011110011000101011000100111001011</span></span><br><span class="line"><span class="string">011010001101011110011011111010111110010100101000110111010110</span></span><br><span class="line"><span class="string">001110000111100100101110001011101010001100010111110111011011</span></span><br><span class="line"><span class="string">111100001000001100010110101100111001001111100100110000001101</span></span><br><span class="line"><span class="string">001110010000000111011110000011000010101000111000000110101101</span></span><br><span class="line"><span class="string">100100011101011111001101001010011111110010111101000010000111</span></span><br><span class="line"><span class="string">110010100110101100001101111101010011000110101100000110001010</span></span><br><span class="line"><span class="string">110101101100001110000100010001001010100010110100100001000011</span></span><br><span class="line"><span class="string">100100000100001101010101001101000101101000000101111110001010</span></span><br><span class="line"><span class="string">101101011010101000111110110000110100000010011111111100110010</span></span><br><span class="line"><span class="string">101111000100000100011000010001011111001010010001010110001010</span></span><br><span class="line"><span class="string">001010001110101010000100010011101001010101101101010111100101</span></span><br><span class="line"><span class="string">001111110000101100010111111100000100101010000001011101100001</span></span><br><span class="line"><span class="string">101011110010000010010110000100001010011111100011011000110010</span></span><br><span class="line"><span class="string">011110010100011101100101111101000001011100001011010001110011</span></span><br><span class="line"><span class="string">000101000101000010010010110111000010101111001101100110011100</span></span><br><span class="line"><span class="string">100011100110011111000110011001111100001110110111001001000111</span></span><br><span class="line"><span class="string">111011000110001000110111011001011110010010010110101000011111</span></span><br><span class="line"><span class="string">011110011110110110011011001011010000100100101010110000010011</span></span><br><span class="line"><span class="string">010011110011100101010101111010001001001111101111101110011101&#x27;&#x27;&#x27;</span></span><br><span class="line">a1= m.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">a = [[<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> row] <span class="keyword">for</span> row <span class="keyword">in</span> a1]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">max1 = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">60</span>):</span><br><span class="line">        <span class="keyword">if</span> a[i][j]==<span class="number">1</span>:</span><br><span class="line">            flag = [[<span class="number">0</span>] * <span class="number">60</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>)]</span><br><span class="line">            dfs(i,j,flag)</span><br><span class="line">            <span class="comment">#max1 = max(max1,flag.count(1))</span></span><br><span class="line">            max1 = <span class="built_in">max</span>(max1,<span class="built_in">sum</span>([<span class="built_in">sum</span>(row) <span class="keyword">for</span> row <span class="keyword">in</span> flag]))</span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(max1)</span><br></pre></td></tr></table></figure></div>
<p>或者</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">m,n,flag</span>):</span><br><span class="line">    <span class="keyword">if</span> flag[m][n]==<span class="number">1</span> <span class="keyword">or</span> a[m][n]==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    flag[m][n]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> m&gt;<span class="number">0</span>  :<span class="comment">#向上</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        dfs(m-<span class="number">1</span>,n,flag)</span><br><span class="line">    <span class="keyword">if</span> n&gt;<span class="number">0</span>  :<span class="comment">#想左</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        dfs(m,n-<span class="number">1</span>,flag)</span><br><span class="line">    <span class="keyword">if</span> m&lt;<span class="number">29</span>  :<span class="comment">#想下</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        dfs(m+<span class="number">1</span>,n,flag)</span><br><span class="line">    <span class="keyword">if</span> n&lt;<span class="number">59</span>  :<span class="comment">#想→</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        dfs(m,n+<span class="number">1</span>,flag)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>148</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>小蓝正在学习一门神奇的语言，这门语言中的单词都是由小写英文字母组 成，有些单词很长，远远超过正常英文单词的长度。小蓝学了很长时间也记不住一些单词，他准备不再完全记忆这些单词，而是根据单词中哪个字母出现得最多来分辨单词。</p>
<p>现在，请你帮助小蓝，给了一个单词后，帮助他找到出现最多的字母和这 个字母出现的次数。</p>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>输入一行包含一个单词，单词只由小写英文字母组成。</p>
<p>对于所有的评测用例，输入的单词长度不超过 1000。</p>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>输出两行，第一行包含一个英文字母，表示单词中出现得最多的字母是哪 个。如果有多个字母出现的次数相等，输出字典序最小的那个。</p>
<p>第二行包含一个整数，表示出现得最多的那个字母在单词中出现的次数。<br>import os<br>import sys<br>zimu &#x3D; input()<br>max1 &#x3D; 0<br>max2 &#x3D; ‘a’</p>
<h4 id="请在此输入您的代码"><a href="#请在此输入您的代码" class="headerlink" title="请在此输入您的代码"></a>请在此输入您的代码</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0</span>*<span class="number">26</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">  <span class="keyword">if</span> max1&lt;zimu.count(<span class="built_in">chr</span>( i+<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) )):</span><br><span class="line">    max1 = zimu.count(<span class="built_in">chr</span>( i+<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) ))</span><br><span class="line">    max2 = <span class="built_in">chr</span>( i+<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) )</span><br><span class="line"><span class="built_in">print</span>(max2)</span><br><span class="line"><span class="built_in">print</span>(max1)</span><br></pre></td></tr></table></figure></div>
<p>本题不难，需要注意的点在于 ord()   返回字符对应的ASCII码  cha()   返回ASCII码对应的字符，这点与c语言不同</p>
<h2 id="简单题"><a href="#简单题" class="headerlink" title="简单题"></a>简单题</h2><p>蓝给学生们组织了一场考试，卷面总分为 100 分，每个学生的得分都是一个 0 到 100 的整数。</p>
<p>如果得分至少是 60 分，则称为及格。如果得分至少为 85 分，则称为优秀。</p>
<p>请计算及格率和优秀率，用百分数表示，百分号前的部分四舍五入保留整数。</p>
<p>输入描述<br>输入的第一行包含一个整数<br>n 行，每行包含一个 0 至 100 的整数，表示一个学生的得分。</p>
<p>输出描述<br>输出两行，每行一个百分数，分别表示及格率和优秀率。百分号前的部分 四舍五入保留整数。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">well,ok=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="comment"># 请在此输入您的代码</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">if</span> a&gt;=<span class="number">85</span>:</span><br><span class="line">        well+=<span class="number">1</span></span><br><span class="line">        ok+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> a&gt;=<span class="number">60</span>:</span><br><span class="line">        ok+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.0f&#125;%&quot;</span>.<span class="built_in">format</span>(<span class="number">100</span>*ok/n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.0f&#125;%&quot;</span>.<span class="built_in">format</span>(<span class="number">100</span>*well/n))</span><br></pre></td></tr></table></figure></div>
<p>此题需要注意蓝桥杯常考的print格式化输出，考前需要复习 <a class="link"   href="https://blog.csdn.net/qq_45726327/article/details/115042863?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167808177916782427448558%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167808177916782427448558&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-115042863-null-null.142%5Ev73%5Einsert_down3,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=python%20format&spm=1018.2226.3001.4187" >format语法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="小蓝在玩一个寻宝游戏"><a href="#小蓝在玩一个寻宝游戏" class="headerlink" title="小蓝在玩一个寻宝游戏,"></a>小蓝在玩一个寻宝游戏,</h2><p>游戏在一条笔直的道路上进行, 道路被分成了 n 个方格, 依次编号 1 至 n, 每个方格上都有一个宝物, 宝物的分值是一个整数 (包括正数、负数和零), 当进入一个方格时即获得方格中宝物的分值。小蓝可 以获得的总分值是他从方格中获得的分值之和。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(math.sqrt(x))+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> x % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(math.sqrt(x))+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> x % i == <span class="number">0</span> <span class="keyword">and</span> is_prime(i):</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">f = [<span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)] * (n+<span class="number">1</span>)</span><br><span class="line">f[<span class="number">1</span>] = a[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    x = i + find(n-i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, x+<span class="number">1</span>):</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[i]+a[j-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f[n])</span><br></pre></td></tr></table></figure></div>
<p>此题最后一个测试用例超时了，蓝桥杯官方也不给具体测试用例，相似的代码c++能通过。<br>需要注意的是求质数，0，1，2都不是质数，求质因数可能是这个数本身</p>
<h2 id="某国赛真题"><a href="#某国赛真题" class="headerlink" title="某国赛真题"></a>某国赛真题</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/1.jpg"
                      alt="原题" title="真题"
                ><br>解法，此题需要约数个数定理<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/2.jpg"
                      alt="定理" title="定理"
                ><br>pi应为素数<br>示例代码：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">要进行质因数分解</span></span><br><span class="line"><span class="string">随后用到求约数个数的公式：</span></span><br><span class="line"><span class="string">（每个质数的次幂+1）相乘</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 阶乘约数</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">100的阶乘，可表示为1x2x3...x100</span></span><br><span class="line"><span class="string">因此可以对参与阶乘的2,3,4,5,6到100进行质因数分解</span></span><br><span class="line"><span class="string">既然质因数分解的数最高也就100</span></span><br><span class="line"><span class="string">那么定义n = 100，也就是要质因数分解的最大的数，就能收集到所需的质数了。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">n = <span class="number">100</span></span><br><span class="line">p = [<span class="number">2</span>]     <span class="comment"># 质数集,其中2</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n + <span class="number">1</span>):</span><br><span class="line">    j = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; i:</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:      <span class="comment"># 如果有比 i 小的数可以将i整除，就表示i为合数，break结束循环，就不会把i加入质数集中.</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.append(i)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">m = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">    m[i] = <span class="number">1</span>  <span class="comment"># 每个质数初始为1，对应公式：”(某一质数的次数 + 1) * (某二质数的次数 + 1)“   中的1。</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">                             <span class="comment"># 遍历 [2, 100]    对应100的阶乘为1x2x3...x100。</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> p:              <span class="comment"># 遍历质数，将每个参与100阶乘中相乘的数都质因数分解一下。# （比如 6 分解成 2*3 ，12 分解成 2*2*3）</span></span><br><span class="line">        <span class="keyword">if</span> j &gt; i:            <span class="comment"># 当所遍历到的质数比要进行质因数分解的数要大时，就直接结束这一层for j in p循环。</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">while</span> i % j == <span class="number">0</span>:    <span class="comment"># 这里是看 i 可以被 &quot;当前 j&quot; 整除多少次，</span></span><br><span class="line">                             <span class="comment"># 当 i 不能再被 &quot;当前 j&quot; 整除时,while循环结束,</span></span><br><span class="line">                             <span class="comment"># for j in p循环继续尝试下一个j，直到j &gt; i，满足if条件，break</span></span><br><span class="line">            i //= j</span><br><span class="line"> </span><br><span class="line">            m[j] += <span class="number">1</span>        <span class="comment"># 让对应的质数个数 + 1</span></span><br><span class="line"> </span><br><span class="line">s = <span class="number">1</span>   <span class="comment"># 定义一个变量s,用于接收相乘得出的约数个数。（因为是相乘，所以s要等于1）</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m.values():        <span class="comment"># 所有质因子的个数相乘，就是约数个数了。</span></span><br><span class="line">    s *= i</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>将tsv文件导入elastic search数据库</title>
    <url>/2023/01/03/%E5%B0%86tsv%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5elastic-search%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>可以使用 Elasticsearch 的 bulk API 来将 TSV 文件导入 Elasticsearch 数据库。</p>
<p>Bulk API 是 Elasticsearch 提供的一种批量执行多个索引、删除或更新操作的方法。使用它可以大幅度提高数据导入的效率。</p>
<p>1.要使用 bulk API 将 TSV 文件导入 Elasticsearch 数据库，你可以这样做：</p>
<p>2.将 TSV 文件转换为 JSON 格式。可以使用 Python 等语言的 csv 库将 TSV 文件读入内存并转换为 JSON 格式。</p>
<p>3.使用 HTTP 客户端（如 Python 的 requests 库）向 Elasticsearch 的 _bulk API 发送 POST 请求。请求的数据是之前转换的 JSON 格式的数据。</p>
<p>等待 Elasticsearch 完成数据导入。</p>
<p>下面是一个使用 Python 和 requests 库将 TSV 文件导入 Elasticsearch 的示例代码：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import csv</span><br><span class="line">import json</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line"># 读入 TSV 文件并转换为 JSON 格式</span><br><span class="line">documents = []</span><br><span class="line">with open(&#x27;data.tsv&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as tsv_file:</span><br><span class="line">    reader = csv.DictReader(tsv_file, delimiter=&#x27;\t&#x27;)</span><br><span class="line">    for row in reader:</span><br><span class="line">        documents.append(row)</span><br><span class="line"></span><br><span class="line"># 使用 bulk API 将数据导入 Elasticsearch</span><br><span class="line">bulk_data = &#x27;&#x27;</span><br><span class="line">for doc in documents:</span><br><span class="line">    action_and_meta = &#123;</span><br><span class="line">        &#x27;index&#x27;: &#123;</span><br><span class="line">            &#x27;_index&#x27;: &#x27;my_index&#x27;,</span><br><span class="line">            &#x27;_type&#x27;: &#x27;my_type&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bulk_data += json.dumps(action_and_meta) + &#x27;\n&#x27;</span><br><span class="line">    bulk_data += json.dumps(doc) + &#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">headers = &#123;&#x27;Content-Type&#x27;: &#x27;application/x-ndjson&#x27;&#125;</span><br><span class="line">response = requests.post(&#x27;http://localhost:9200/_bulk&#x27;, data=bulk_data, headers=headers)</span><br><span class="line"></span><br><span class="line">if response.status_code != 200:</span><br><span class="line">    raise Exception(&#x27;Failed to index data&#x27;)</span><br></pre></td></tr></table></figure></div>
<p>上述代码仅作为示例，你可能需要根据自己的需求修改。例如，你可能需要调整 _index 和 _type 的值，以确定导入的数据存储在哪个索引和类型中。</p>
<p>为了提高效率，bulk API 会批量执行多个操作，而不是每个操作都发送一次请求。所以，你需要将每个操作的信息和数据都拼接到一起，再发送一次请求。</p>
<p>在使用 bulk API 导入数据时，你需要使用 application&#x2F;x-ndjson 的 Content-Type。</p>
<p>如果你的 TSV 文件较大，你可能还需要考虑分批导入。例如，每次只导入一个文件的一部分，而不是一次性将整个文件导入。这样可以减少内存占用，避免导入过程中的超时等问题。</p>
<p>总的来说，使用 bulk API 将 TSV 文件导入 Elasticsearch 是一种有效的方法，可以帮助你快速和高效地导入数据。</p>
]]></content>
  </entry>
  <entry>
    <title>数据库操作记录</title>
    <url>/2023/03/21/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>老是忘记数据库许多基本操作，开个贴记录一下</p>
<h2 id="数据库一些基本操作"><a href="#数据库一些基本操作" class="headerlink" title="数据库一些基本操作"></a>数据库一些基本操作</h2><p>truncate table<br>删除一个表中所有的数据<br>注意truncate删除数据后是不可以rollback的。</p>
<h2 id="从数据库一列提取无重复数据插入另一张表"><a href="#从数据库一列提取无重复数据插入另一张表" class="headerlink" title="从数据库一列提取无重复数据插入另一张表"></a>从数据库一列提取无重复数据插入另一张表</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> search_policygrade (policy_grade)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> policy_grade <span class="keyword">FROM</span> search_policy;</span><br></pre></td></tr></table></figure></div>
<p>python:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">cnx = pymysql.connect(</span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;.&#x27;</span>, host=<span class="string">&#x27;&#x27;</span>, database=<span class="string">&#x27;search&#x27;</span>)</span><br><span class="line">cursor = cnx.cursor()</span><br><span class="line"></span><br><span class="line">query = (<span class="string">&quot;SELECT DISTINCT policy_grade FROM search_policy&quot;</span>)</span><br><span class="line"></span><br><span class="line">cursor.execute(query)</span><br><span class="line">result = cursor.fetchall()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">result_list = []</span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> result:</span><br><span class="line">    result_list.append(record[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(result_list)</span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>django部署上云</title>
    <url>/2023/04/14/django%E9%83%A8%E7%BD%B2%E4%B8%8A%E4%BA%91/</url>
    <content><![CDATA[<p>因为上一次部署遇到了很多问题，这一次决定记录一下，以便下次部署的时候可以快速上手。</p>
<h2 id="配置gitee"><a href="#配置gitee" class="headerlink" title="配置gitee"></a>配置gitee</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;&quot;</span><br><span class="line">git config --global user.email &quot;654@qq.com&quot;</span><br></pre></td></tr></table></figure></div>
<p>生成密钥</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;862049654@qq.com&quot;</span><br></pre></td></tr></table></figure></div>
<p>查看密钥并拷贝，将它添加到码云个人账号的SSH公钥里：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></div>
<p>测试链接</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@git.oschina.net</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">The authenticity of host &#x27;git.oschina.net (212.64.63.190)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:FQGC9Kn/eye1W8icdBgrQp+KkGYoFgbVr17bmjey0Wc.</span><br><span class="line">ECDSA key fingerprint is MD5:27:e5:d3:f7:2a:9e:eb:6c:93:cd:1f:c1:47:a3:54:b1.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure></div>
<p>输入yes,而不是按enter</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi ikko-debug! You&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br></pre></td></tr></table></figure></div>
<p>然后就可以使用git clone了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@gitee.com:.git#从仓库主页复制</span><br></pre></td></tr></table></figure></div>
<p>以后需要更新仓库只需要cd到项目目录下，然后git pull即可</p>
<h2 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h2><h3 id="配置pip包管理器"><a href="#配置pip包管理器" class="headerlink" title="配置pip包管理器"></a>配置pip包管理器</h3><p>首先在自己虚拟环境下<br>pip freeze &gt; requirements.txt<br>然后在服务器上<br>pip3.9 install -r requirements.txt<br>安装mysqlclient遇到：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_config</span><br><span class="line">          raise OSError(&quot;&#123;&#125; not found&quot;.format(_mysql_config_path))</span><br><span class="line">      OSError: mysql_config not found</span><br><span class="line">      mysql_config --version</span><br><span class="line">      mariadb_config --version</span><br><span class="line">      mysql_config --libs</span><br><span class="line">      [end of output]</span><br><span class="line">  </span><br><span class="line">  note: This error originates from a subprocess, and is likely not a problem with pip.</span><br><span class="line">error: metadata-generation-failed</span><br><span class="line"></span><br><span class="line">× Encountered error while generating package metadata.</span><br><span class="line">╰─&gt; See above for output.</span><br><span class="line"></span><br><span class="line">note: This is an issue with the package mentioned above, not pip.</span><br><span class="line">hint: See above for details.</span><br></pre></td></tr></table></figure></div>
<p>安装 MySQL C Connector 及其开发包，以便能够正确编译和链接 mysqlclient 包。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">unbuntu:</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install libmysqlclient-dev</span><br><span class="line">centos:</span><br><span class="line">sudo yum install mysql-devel</span><br></pre></td></tr></table></figure></div>
<p>然后运行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_config --version</span><br></pre></td></tr></table></figure></div>
<p>重新pip，成功</p>
<h3 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h3><p>我已经装过了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动nginx: service nginx start</span><br><span class="line">停止nginx：service nginx stop</span><br><span class="line">重启nginx：service nginx restart;./nginx -s reload</span><br><span class="line">重载配置文件：service nginx reload</span><br><span class="line">查看nginx状态：service nginx status</span><br></pre></td></tr></table></figure></div>
<p>配置nginx：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 90;</span><br><span class="line">    server_name ;  # 设置您的域名或 IP 地址，服务器IP地址</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:8001; # 需要和ini文件中的端口保持一致，这样才能实现两者的通信。</span><br><span class="line">        uwsgi_read_timeout 30;</span><br><span class="line">   &#125;</span><br><span class="line">   location /static/ &#123;</span><br><span class="line">        root /root/searchsys/collected_static;  # CSS, JavaScript 和图片等静态文件的路径</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>也装过了</p>
<h3 id="安装配置uwsgi"><a href="#安装配置uwsgi" class="headerlink" title="安装配置uwsgi"></a>安装配置uwsgi</h3><p>pip3.9 install uwsgi<br>在&#x2F;home&#x2F;根目录创建文件夹mylog_uwsg<br>在mylog_uwsgi文件夹下新建名为mylog.ini文件<br>填入：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line">chdir = /usr/searchsys</span><br><span class="line">#module = searchsys.wsgi:searchsys  #对应你的项目名</span><br><span class="line">wsgi-file = /usr/searchsys/searchsys/wsgi.py</span><br><span class="line">python-path = /root/Python-3.9.16</span><br><span class="line">master = True</span><br><span class="line">processes = 4</span><br><span class="line">harakiri = 60</span><br><span class="line">max-requests = 5000</span><br><span class="line"></span><br><span class="line">socket = 127.0.0.1:8001  #对应配置安全组时开放的端口，uWSGI根据socket协议与Nginx相互在这个端口通信，在进行Nginx配置时会设置相同端口，这步极其重要，否则会配置失败</span><br><span class="line">uid = 1000 </span><br><span class="line">gid = 2000</span><br><span class="line">buffer-size = 65536</span><br><span class="line">pidfile = /usr/searchsys/mylog_uwsgi/master.pid  </span><br><span class="line">daemonize = /usr/searchsys/mylog_uwsgi/mylog.log  </span><br><span class="line"></span><br><span class="line">vacuum = True</span><br></pre></td></tr></table></figure></div>
<p>注意文件中路径后面不能有空格，不然会报错，我找了一天错没找到，服了，这一般人谁能看出来是有空格，建议copy的时候删除所有注释</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">chdir() to /usr/searchsys  #你的项目文件夹路径</span><br><span class="line">chdir(): No such file or directory [core/uwsgi.c line 2625]</span><br></pre></td></tr></table></figure></div>

<p>uwsgi –ini root&#x2F;mylog_uwsg&#x2F;mylog.ini<br>启动：uwsgi -ini &#x2F;root&#x2F;mylog_uwsgi&#x2F;mylog.ini<br>然后报错：<br>uwsgi: invalid option – ‘n’<br>getopt_long() error<br>网上查了下使用很多人提供的解决方案，不行，于是放弃，只用nginx<br>后来把项目从root下移动到了&#x2F;usr下，然后<br>折磨了一天使用这条命令成功了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">uwsgi --ini /usr/searchsys/mylog_uwsgi/mylog.ini</span><br></pre></td></tr></table></figure></div>
<p>[uWSGI] getting INI configuration from &#x2F;root&#x2F;mylog_uwsgi&#x2F;mylog.ini<br>关闭uwwsgi</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">fuser -k 8000/tcp</span><br></pre></td></tr></table></figure></div>
<h3 id="静态文件收集"><a href="#静态文件收集" class="headerlink" title="静态文件收集"></a>静态文件收集</h3><p>settings.py中配置</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">STATIC_URL = &#x27;/static/&#x27;</span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, &#x27;collected_static&#x27;)</span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, &#x27;static&#x27;),</span><br><span class="line">    # 如果有多个应用，可以继续添加</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<p>然后执行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure></div>


<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">重启uwsgi：</span><br><span class="line">uwsgi --reload /usr/searchsys/mylog_uwsgi/master.pid</span><br><span class="line"></span><br><span class="line">./nginx -s reload //重启nginx</span><br></pre></td></tr></table></figure></div>
<p>注意，每次修改代码都需要执行上述操作</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>强烈推荐使用vscode的ssh连接服务器，可以很方便的查看文件结构<br>如果遇到报错，可以查看<br>uwsgi的日志在mylog_uwsgi&#x2F;mylog.log中<br>nginx的日志在&#x2F;nginx&#x2F;logs&#x2F;error.log中</p>
]]></content>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch性能优化</title>
    <url>/2023/04/11/elasticsearch%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="索引设计优化"><a href="#索引设计优化" class="headerlink" title="索引设计优化"></a>索引设计优化</h2><p>索引设计优化是指在创建 Elasticsearch 索引时，通过合理的配置字段类型、分词器、索引参数等，来提高搜索性能和准确性。以下是一些具体的索引设计优化方法：</p>
<p>字段类型选择：选择合适的字段类型对于索引性能和存储空间的消耗都有重要影响。Elasticsearch 支持多种字段类型，包括文本型（text）、关键字型（keyword）、日期型（date）、数值型（numeric）等。根据字段的特点和查询需求，选择合适的字段类型。例如，对于需要进行全文搜索的文本字段，可以使用 text 类型，并选择合适的分词器进行分词；对于不需要进行分词的字段，如关键字、日期、数值等，可以使用 keyword、date、numeric 类型，以减少分词和存储的开销。</p>
<p>分词器设置：分词器对于全文搜索的效果至关重要。Elasticsearch 默认使用标准分词器（standard analyzer），但并不一定适用于所有场景。根据查询需求和数据特点，选择合适的分词器进行配置。例如，对于中文文本字段，可以选择中文分词器，如 ik 分词器或 smartcn 分词器，以支持中文分词和搜索；对于英文文本字段，可以选择英文分词器，如英文停用词过滤器、小写转换过滤器等，以提高搜索的准确性。</p>
<p>索引参数设置：索引参数可以控制索引的性能和存储空间的使用。例如，设置合适的分片数和副本数，以充分利用集群的性能和容错能力；设置合适的刷新间隔和合并策略，以控制索引的刷新和合并操作对性能的影响；设置合适的存储设置，如控制字段的存储方式和精度，以控制存储空间的使用；使用字段映射（field mapping）来控制字段的分析、索引和存储行为，以满足查询需求。</p>
<p>数据预处理：在索引数据之前，可以对数据进行预处理，以减少索引大小和提高查询效率。例如，可以去除无关字段、进行关键词提取、进行数据清洗等。这可以减少索引的存储空间占用和提高搜索性能。</p>
<p>查询性能考虑：在索引设计时，可以根据查询需求和查询性能的考虑来优化索引结构。例如，对于经常一起查询的字段，可以考虑将它们放在同一个索引中，以减少联合查询的开销；对于需要排序和聚合的字段，可以考虑使用 keyword 类型而不是text类型，以减少分词和排序的开销。</p>
]]></content>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫</title>
    <url>/2023/04/19/%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h2 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h2><p>copyright from <a class="link"   href="https://blog.csdn.net/INTEGRATOR_37/article/details/113386649" >https://blog.csdn.net/INTEGRATOR_37/article/details/113386649 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.gov.cn/zhengce/zuixin.htm&#x27;</span></span><br><span class="line">UA = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User_Agent&#x27;</span>: UA&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url, headers=headers)</span><br><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(r.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">attrs = &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;date&#x27;</span>&#125;</span><br><span class="line">links = soup.find_all(href=re.<span class="built_in">compile</span>(<span class="string">&#x27;content&#x27;</span>))</span><br><span class="line">dates = soup.find_all(name=<span class="string">&#x27;span&#x27;</span>, attrs=attrs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get titles and links</span></span><br><span class="line">titles = []</span><br><span class="line">urls = []</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">    titles.append(<span class="built_in">str</span>(link.string))</span><br><span class="line">    url = link.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    urls.append(<span class="built_in">str</span>(url))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get days</span></span><br><span class="line">days = []</span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;(\d+)\-(\d+)\-(\d+)&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> date <span class="keyword">in</span> dates:</span><br><span class="line">    s = date.string</span><br><span class="line">    day = re.search(pattern, s)</span><br><span class="line">    days.append(<span class="built_in">str</span>(day.group()))</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;date&#x27;</span>: days,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: titles,</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: urls&#125;</span><br><span class="line">frame = DataFrame(data)</span><br><span class="line">frame.to_csv(<span class="string">&#x27;test.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div>
<h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>上面这段代码主要的目的是抓取中国政府网（<a class="link"   href="http://www.gov.cn)中最新的法规政策,并将其日期、标题和链接保存到csv文件中./" >www.gov.cn）中最新的法规政策，并将其日期、标题和链接保存到CSV文件中。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li><code>import requests</code>: 引入requests库，用于网络请求操作。</li>
<li><code>import re</code>: 引入re库，用于正则表达式匹配。</li>
<li><code>from bs4 import BeautifulSoup</code>: 引入BeautifulSoup库，用于解析HTML页面。</li>
<li><code>from pandas import DataFrame</code>: 引入DataFrame库，用于构建数据表格。</li>
</ul>
<p>接下来是变量定义：</p>
<ul>
<li><code>url = &#39;http://www.gov.cn/zhengce/zuixin.htm&#39;</code>：指定要爬取数据的网站URL。</li>
<li><code>UA = &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#39;</code>：设置User-Agent，模拟浏览器进行访问。</li>
<li><code>headers = &#123;&#39;User_Agent&#39;: UA&#125;</code>: 设置请求头部信息，包括User-Agent。</li>
<li><code>r = requests.get(url, headers=headers)</code>：发送HTTP GET请求获取网站页面源码。</li>
<li><code>r.encoding = &#39;utf-8&#39;</code>：设置网页内容的编码格式为UTF-8。</li>
<li><code>soup = BeautifulSoup(r.text, &#39;lxml&#39;)</code>：使用BeautifulSoup库解析HTML页面。</li>
<li><code>attrs = &#123;&#39;class&#39;: &#39;date&#39;&#125;</code>：设定属性字典{‘class’: ‘date’}，以查找所有class为’date’的span标签。</li>
<li><code>links = soup.find_all(href=re.compile(&#39;content&#39;))</code>：使用正则表达式查找href属性中包含’content’字符串的所有a标签。</li>
<li><code>dates = soup.find_all(name=&#39;span&#39;, attrs=attrs)</code>：查找所有class为’date’的span标签，并通过attrs参数和name参数指定进一步的筛选条件。</li>
</ul>
<p>接下来，代码获取标题、链接和日期数据：</p>
<ul>
<li>使用for循环遍历所有查找到的links元素，将其中的标题保存到变量titles列表中，将链接地址存储到urls列表中。</li>
<li>使用正则表达式从日期的字符串中提取出日期信息，并将其追加到days列表中。</li>
</ul>
<p>最后，该程序创建了一个数据字典data，并使用DataFrame类构建了一个数据表格frame。然后，将这个表格以CSV格式写入test.csv文件中，其中index&#x3D;False指定不要写入索引值（即第一列）到文件中。<br>爬出数据是这样的：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">date,title,url</span><br><span class="line">2023-04-18,中共中央印发《中央党内法规制定工作规划纲要（2023－2027年）》,/zhengce/2023-04/18/content_5752088.htm</span><br><span class="line">2023-04-18,国务院办公厅关于调整第19届亚运会和第4届亚残运会工作领导小组组成人员等有关事项的通知,http://www.gov.cn/zhengce/content/2023-04/18/content_5752017.htm</span><br><span class="line">2023-04-14,国务院办公厅关于上市公司独立董事制度改革的意见,http://www.gov.cn/zhengce/content/2023-04/14/content_5751463.htm</span><br><span class="line">2023-04-12,征兵工作条例,http://www.gov.cn/zhengce/content/2023-04/12/content_5750986.htm</span><br><span class="line">2023-04-10,中共中央发出关于学习《习近平著作选读》第一卷、第二卷的通知,/zhengce/2023-04/10/content_5750697.htm</span><br><span class="line">2023-04-07,国务院办公厅关于成立第五次全国经济普查领导小组的通知,http://www.gov.cn/zhengce/content/2023-04/07/content_5750375.htm</span><br></pre></td></tr></table></figure></div>
<h2 id="代码修改"><a href="#代码修改" class="headerlink" title="代码修改"></a>代码修改</h2><h3 id="url修改"><a href="#url修改" class="headerlink" title="url修改"></a>url修改</h3><p>首先可以看到爬取的url是不规范的，有的是绝对url，有的是相对url，这样就需要对url进行处理，使其都是绝对url。对于不规范的URL，我们可以使用Python中的urllib.parse.urljoin()函数将相对URL转化为绝对URL。该函数可以将基础URL和相对URL合并成一个完整的URL，并返回结果。<br>通过调用urljoin()函数，将上述示例中的URL处理为绝对URL：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;http://www.gov.cn/&#x27;</span></span><br><span class="line">data = [</span><br><span class="line">    (<span class="string">&#x27;2023-04-18&#x27;</span>, <span class="string">&#x27;中共中央印发《中央党内法规制定工作规划纲要（2023－2027年）》&#x27;</span>, <span class="string">&#x27;/zhengce/2023-04/18/content_5752088.htm&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;2023-04-18&#x27;</span>, <span class="string">&#x27;国务院办公厅关于调整第19届亚运会和第4届亚残运会工作领导小组组成人员等有关事项的通知&#x27;</span>, <span class="string">&#x27;http://www.gov.cn/zhengce/content/2023-04/18/content_5752017.htm&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;2023-04-14&#x27;</span>, <span class="string">&#x27;国务院办公厅关于上市公司独立董事制度改革的意见&#x27;</span>, <span class="string">&#x27;http://www.gov.cn/zhengce/content/2023-04/14/content_5751463.htm&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;2023-04-12&#x27;</span>, <span class="string">&#x27;征兵工作条例&#x27;</span>, <span class="string">&#x27;http://www.gov.cn/zhengce/content/2023-04/12/content_5750986.htm&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;2023-04-10&#x27;</span>, <span class="string">&#x27;中共中央发出关于学习《习近平著作选读》第一卷、第二卷的通知&#x27;</span>, <span class="string">&#x27;/zhengce/2023-04/10/content_5750697.htm&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;2023-04-07&#x27;</span>, <span class="string">&#x27;国务院办公厅关于成立第五次全国经济普查领导小组的通知&#x27;</span>, <span class="string">&#x27;http://www.gov.cn/zhengce/content/2023-04/07/content_5750375.htm&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> date, title, url <span class="keyword">in</span> data:</span><br><span class="line">    full_url = urljoin(base_url, url)</span><br><span class="line">    <span class="built_in">print</span>(date, title, full_url)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>对于相对URL，urljoin()函数会自动补全为绝对URL，而对于绝对URL，则不会进行任何更改。</p>
<h3 id="修改成功后发现，绝对url和相对url对应的页面结构是不同的"><a href="#修改成功后发现，绝对url和相对url对应的页面结构是不同的" class="headerlink" title="修改成功后发现，绝对url和相对url对应的页面结构是不同的"></a>修改成功后发现，绝对url和相对url对应的页面结构是不同的</h3><h4 id="添加判断url为相对url还是绝对url"><a href="#添加判断url为相对url还是绝对url" class="headerlink" title="添加判断url为相对url还是绝对url"></a>添加判断url为相对url还是绝对url</h4><p>可以使用Python的urllib.parse.urlparse()函数将URL解析成6个部分（scheme，netloc，path，params，query和fragment），然后检查其中是否包含netloc字段，如果netloc为空，就是相对URL，否则就是绝对URL。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_relative_url</span>(<span class="params">url</span>):</span><br><span class="line">    parsed_url = urlparse(url)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> <span class="built_in">bool</span>(parsed_url.netloc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="built_in">print</span>(is_relative_url(<span class="string">&#x27;/zhengce/2023-04/18/content_5752088.htm&#x27;</span>))     <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(is_relative_url(<span class="string">&#x27;http://www.gov.cn/zhengce/content/2023-04/14/content_5751463.htm&#x27;</span>))     <span class="comment"># False</span></span><br></pre></td></tr></table></figure></div>
<h4 id="先处理相对url"><a href="#先处理相对url" class="headerlink" title="先处理相对url"></a>先处理相对url</h4><p>相对url有四个字段：标题，时间，来源，正文</p>
<h5 id="提取标题"><a href="#提取标题" class="headerlink" title="提取标题"></a>提取标题</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line">url = <span class="string">&#x27;http://www.gov.cn/zhengce/2023-04/18/content_5752088.htm&#x27;</span></span><br><span class="line">UA = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User_Agent&#x27;</span>: UA&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url, headers=headers)</span><br><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(r.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line">title_element = soup.find(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">title = title_element.get_text().strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(title)  <span class="comment"># 输出 &quot;中共中央印发《中央党内法规制定工作规划纲要（2023－2027年）》&quot;</span></span><br></pre></td></tr></table></figure></div>
<h5 id="提取发布时间和来源"><a href="#提取发布时间和来源" class="headerlink" title="提取发布时间和来源"></a>提取发布时间和来源</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用class属性查找包含发布时间和来源的div元素</span></span><br><span class="line">pages_date = soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;pages-date&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取发布时间和来源的文本内容</span></span><br><span class="line">publish_time = pages_date.contents[<span class="number">0</span>].strip()</span><br><span class="line"><span class="comment"># 将日期字符串转换为datetime类型的数据</span></span><br><span class="line">publish_time = datetime.strptime(publish_time, <span class="string">&#x27;%Y-%m-%d %H:%M&#x27;</span>)</span><br><span class="line">source = pages_date.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;font&#x27;</span>).text.strip().replace(<span class="string">&#x27;来源：&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;发布时间：&quot;</span>, publish_time)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;来源：&quot;</span>, source)</span><br></pre></td></tr></table></figure></div>
<h5 id="提取正文"><a href="#提取正文" class="headerlink" title="提取正文"></a>提取正文</h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用id属性查找包含正文内容的div元素</span></span><br><span class="line">pages_content = soup.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;UCAP-CONTENT&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找正文内容中的所有p元素</span></span><br><span class="line">p_tags = pages_content.find_all(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有的p标签，并将它们的文本内容连接起来</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> p_tag <span class="keyword">in</span> p_tags:</span><br><span class="line">    <span class="comment"># 判断该p标签内是否包含&lt;span&gt;标签</span></span><br><span class="line">    <span class="keyword">if</span> p_tag.find(<span class="string">&#x27;span&#x27;</span>):</span><br><span class="line">        <span class="comment"># 使用extract()方法将该&lt;span&gt;标签从文档中去除</span></span><br><span class="line">        p_tag.find(<span class="string">&#x27;span&#x27;</span>).extract()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将该p标签的文本内容连接到text变量中</span></span><br><span class="line">    text += p_tag.text.strip() + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure></div>
<h4 id="处理绝对url"><a href="#处理绝对url" class="headerlink" title="处理绝对url"></a>处理绝对url</h4><p>绝对url有主题分类，发文机关，标题，发文字号，成文日期，发布日期,正文</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line">url = <span class="string">&#x27;http://www.gov.cn/zhengce/content/2023-04/12/content_5750986.htm&#x27;</span></span><br><span class="line">UA = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User_Agent&#x27;</span>: UA&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url, headers=headers)</span><br><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(r.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到包含信息的表格标签</span></span><br><span class="line">info_table = soup.find(<span class="string">&#x27;table&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;bd1&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到每个信息所在的表格行，并提取数据</span></span><br><span class="line">rows = info_table.find_all(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line"></span><br><span class="line">topic_category = rows[<span class="number">0</span>].find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">3</span>].text.strip()</span><br><span class="line">publishing_organization = rows[<span class="number">1</span>].find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">1</span>].text.strip()</span><br><span class="line">title = rows[<span class="number">2</span>].find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">1</span>].text.strip()</span><br><span class="line">document_number = rows[<span class="number">3</span>].find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">1</span>].text.strip()</span><br><span class="line">written_date = rows[<span class="number">1</span>].find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">3</span>].text.strip()</span><br><span class="line">release_date = rows[<span class="number">3</span>].find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">3</span>].text.strip()</span><br><span class="line">written_date = datetime.strptime(written_date, <span class="string">&#x27;%Y年%m月%d日&#x27;</span>)</span><br><span class="line">release_date = datetime.strptime(release_date, <span class="string">&#x27;%Y年%m月%d日&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印提取到的数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主题分类：&#x27;</span>, topic_category)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;发文机关：&#x27;</span>, publishing_organization)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;标题：&#x27;</span>, title)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;发文字号：&#x27;</span>, document_number)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;成文日期：&#x27;</span>, written_date)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;发布日期：&#x27;</span>, release_date)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用id属性查找包含正文内容的div元素</span></span><br><span class="line">pages_content = soup.find(<span class="string">&#x27;td&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;UCAP-CONTENT&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找正文内容中的所有p元素</span></span><br><span class="line">p_tags = pages_content.find_all(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有的p标签，并将它们的文本内容连接起来</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> p_tag <span class="keyword">in</span> p_tags:</span><br><span class="line">    <span class="comment"># 判断该p标签内是否包含&lt;span&gt;标签</span></span><br><span class="line">    <span class="keyword">if</span> p_tag.find(<span class="string">&#x27;span&#x27;</span>):</span><br><span class="line">        <span class="comment"># 使用extract()方法将该&lt;span&gt;标签从文档中去除</span></span><br><span class="line">        p_tag.find(<span class="string">&#x27;span&#x27;</span>).extract()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将该p标签的文本内容连接到text变量中</span></span><br><span class="line">    text += p_tag.text.strip() + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure></div>
<h3 id="确保数据不重复"><a href="#确保数据不重复" class="headerlink" title="确保数据不重复"></a>确保数据不重复</h3><p>使用pickle模块将已经爬取过的url保存到本地，下次爬取时，先从本地读取已经爬取过的url，然后再进行爬取，这样就可以确保数据不重复了。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    visited_urls = pickle.load(f)</span><br><span class="line">    <span class="built_in">print</span>(visited_urls)</span><br></pre></td></tr></table></figure></div>
<h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Error</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crawl_and_process</span>(<span class="params">urls_to_crawl</span>):</span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&#x27;&#x27;</span>, user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;&#x27;</span>, database=<span class="string">&#x27;search&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建游标对象</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询数据库中最大的主键值</span></span><br><span class="line">    cursor.execute(<span class="string">&#x27;SELECT MAX(policy_id) FROM search_policy&#x27;</span>)</span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    max_id = result[<span class="number">0</span>] <span class="keyword">if</span> result[<span class="number">0</span>] <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将新数据的主键值设置为查询到的最大主键值加1</span></span><br><span class="line">    new_id = <span class="built_in">int</span>(max_id) + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">23</span>,new_id)</span><br><span class="line">    new_id = <span class="built_in">str</span>(new_id)</span><br><span class="line">    <span class="comment"># 读取已经爬取的URL</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            visited_urls = pickle.load(f)</span><br><span class="line">            <span class="built_in">print</span>(visited_urls)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        visited_urls = <span class="built_in">set</span>() <span class="comment">#实际我生成的是列表</span></span><br><span class="line">    </span><br><span class="line">    data1 =[]</span><br><span class="line">    count1 = <span class="number">0</span></span><br><span class="line">    count2 = <span class="number">0</span></span><br><span class="line">    data2=[]</span><br><span class="line">    sql1 = <span class="string">&#x27;INSERT INTO search_policy (policy_id, policy_title, pub_time, pub_agency, policy_body,policy_grade) VALUES (%s, %s,  %s, %s, %s, %s)&#x27;</span></span><br><span class="line">    sql2 = <span class="string">&#x27;INSERT INTO search_policy (policy_id, policy_title, pub_agency,pub_time,UPDATE_DATE,pub_number, policy_body,policy_grade) VALUES (%s, %s,  %s, %s,  %s, %s, %s, %s)&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls_to_crawl:</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判断URL是否已经被爬取过</span></span><br><span class="line">        <span class="keyword">if</span> url <span class="keyword">in</span> visited_urls:</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 爬取URL并进行数据处理</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;/content/&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;正在爬取：&#x27;</span>, url)</span><br><span class="line">            data1.append(relativeurl(url,new_id))</span><br><span class="line">            new_id = <span class="built_in">int</span>(new_id) + <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="number">52</span>,new_id)</span><br><span class="line">            new_id = <span class="built_in">str</span>(new_id)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;正在爬取：&#x27;</span>, url)</span><br><span class="line">            data2.append(absoluteurl(url,new_id))</span><br><span class="line">            new_id = <span class="built_in">int</span>(new_id) + <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            new_id = <span class="built_in">str</span>(new_id)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 将已经爬取的URL添加到visited_urls中</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="number">64</span>)    </span><br><span class="line">        visited_urls.append(url)</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">66</span>,)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data1) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cursor.executemany(sql1, data1)</span><br><span class="line">            conn.commit()</span><br><span class="line">        <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            conn.rollback()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data2) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">        cursor.executemany(sql2, data2)</span><br><span class="line">        conn.commit()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">74</span>)</span><br><span class="line">    <span class="comment"># 保存visited_urls到pickle文件中</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(visited_urls, f)</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close() </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_relative_url</span>(<span class="params">url</span>):<span class="comment">#判断是否为相对路径</span></span><br><span class="line">    parsed_url = urlparse(url)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> <span class="built_in">bool</span>(parsed_url.netloc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">relativeurl</span>(<span class="params">url,new_id</span>):</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    UA = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User_Agent&#x27;</span>: UA&#125;</span><br><span class="line"></span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(r.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    title_element = soup.find(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">    title = title_element.get_text().strip()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用class属性查找包含发布时间和来源的div元素</span></span><br><span class="line">    pages_date = soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;pages-date&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取发布时间和来源的文本内容</span></span><br><span class="line">    publish_time = pages_date.contents[<span class="number">0</span>].strip()</span><br><span class="line">    <span class="comment"># 将日期字符串转换为datetime类型的数据</span></span><br><span class="line">    publish_time = datetime.strptime(publish_time, <span class="string">&#x27;%Y-%m-%d %H:%M&#x27;</span>)</span><br><span class="line">    source = pages_date.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;font&#x27;</span>).text.strip().replace(<span class="string">&#x27;来源：&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用id属性查找包含正文内容的div元素</span></span><br><span class="line">    pages_content = soup.find(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;UCAP-CONTENT&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 查找正文内容中的所有p元素</span></span><br><span class="line">    p_tags = pages_content.find_all(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历所有的p标签，并将它们的文本内容连接起来</span></span><br><span class="line">    text = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> p_tag <span class="keyword">in</span> p_tags:</span><br><span class="line">        <span class="comment"># 判断该p标签内是否包含&lt;span&gt;标签</span></span><br><span class="line">        <span class="keyword">if</span> p_tag.find(<span class="string">&#x27;span&#x27;</span>):</span><br><span class="line">            <span class="comment"># 使用extract()方法将该&lt;span&gt;标签从文档中去除</span></span><br><span class="line">            p_tag.find(<span class="string">&#x27;span&#x27;</span>).extract()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将该p标签的文本内容连接到text变量中</span></span><br><span class="line">        text += p_tag.text.strip() + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    data = (new_id,title, publish_time, source, text,<span class="string">&#x27;国家级&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">125</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">absoluteurl</span>(<span class="params">url,new_id</span>):</span><br><span class="line">    UA = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#x27;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User_Agent&#x27;</span>: UA&#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在爬取：&#x27;</span>, url)</span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    soup = BeautifulSoup(r.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment"># 找到包含信息的表格标签</span></span><br><span class="line">    info_table = soup.find(<span class="string">&#x27;table&#x27;</span>, &#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;bd1&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找到每个信息所在的表格行，并提取数据</span></span><br><span class="line">    rows = info_table.find_all(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    topic_category = rows[<span class="number">0</span>].find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">3</span>].text.strip()</span><br><span class="line">    publishing_organization = rows[<span class="number">1</span>].find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">1</span>].text.strip()</span><br><span class="line">    title = rows[<span class="number">2</span>].find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">1</span>].text.strip()</span><br><span class="line">    document_number = rows[<span class="number">3</span>].find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">1</span>].text.strip()</span><br><span class="line">    written_date = rows[<span class="number">1</span>].find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">3</span>].text.strip()</span><br><span class="line">    release_date = rows[<span class="number">3</span>].find_all(<span class="string">&#x27;td&#x27;</span>)[<span class="number">3</span>].text.strip()</span><br><span class="line">    written_date = datetime.strptime(written_date, <span class="string">&#x27;%Y年%m月%d日&#x27;</span>)</span><br><span class="line">    release_date = datetime.strptime(release_date, <span class="string">&#x27;%Y年%m月%d日&#x27;</span>)</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用id属性查找包含正文内容的div元素</span></span><br><span class="line">    pages_content = soup.find(<span class="string">&#x27;td&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;UCAP-CONTENT&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找正文内容中的所有p元素</span></span><br><span class="line">    p_tags = pages_content.find_all(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历所有的p标签，并将它们的文本内容连接起来</span></span><br><span class="line">    text = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> p_tag <span class="keyword">in</span> p_tags:</span><br><span class="line">        <span class="comment"># 判断该p标签内是否包含&lt;span&gt;标签</span></span><br><span class="line">        <span class="keyword">if</span> p_tag.find(<span class="string">&#x27;span&#x27;</span>):</span><br><span class="line">            <span class="comment"># 使用extract()方法将该&lt;span&gt;标签从文档中去除</span></span><br><span class="line">            p_tag.find(<span class="string">&#x27;span&#x27;</span>).extract()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将该p标签的文本内容连接到text变量中</span></span><br><span class="line">        text += p_tag.text.strip() + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    </span><br><span class="line">    data = (new_id,title,publishing_organization,written_date,release_date,document_number,text,<span class="string">&#x27;国家级&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">UA = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User_Agent&#x27;</span>: UA&#125;</span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">83</span>):  <span class="comment"># 假设要爬取前100页</span></span><br><span class="line">    cn = <span class="string">f&#x27;http://sousuo.gov.cn/column/30469/<span class="subst">&#123;page&#125;</span>.htm&#x27;</span></span><br><span class="line">    <span class="comment"># 爬取该页的数据</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(cn, headers=headers)</span><br><span class="line">        r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">        soup = BeautifulSoup(r.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        <span class="comment">#获取该页的所有政策链接</span></span><br><span class="line">        links = soup.find_all(href=re.<span class="built_in">compile</span>(<span class="string">&#x27;content&#x27;</span>))</span><br><span class="line">        urls = []</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">            </span><br><span class="line">            url = link.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            urls.append(<span class="built_in">str</span>(url))</span><br><span class="line">        <span class="built_in">print</span>(urls)</span><br><span class="line">        crawl_and_process(urls)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭游标和连接</span></span><br><span class="line">           </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></div>]]></content>
  </entry>
  <entry>
    <title>django开发api</title>
    <url>/2023/06/03/django%E5%BC%80%E5%8F%91api/</url>
    <content><![CDATA[<h2 id="django开发api"><a href="#django开发api" class="headerlink" title="django开发api"></a>django开发api</h2><h3 id="1-安装django"><a href="#1-安装django" class="headerlink" title="1.安装django"></a>1.安装django</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure></div>
<h3 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">django-admin startproject api</span><br></pre></td></tr></table></figure></div>
<h3 id="3-创建应用"><a href="#3-创建应用" class="headerlink" title="3.创建应用"></a>3.创建应用</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python manage.py startapp api</span><br></pre></td></tr></table></figure></div>
<h3 id="安装rest-framework"><a href="#安装rest-framework" class="headerlink" title="安装rest_framework"></a>安装rest_framework</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure></div>
<h3 id="4-配置settings-py"><a href="#4-配置settings-py" class="headerlink" title="4.配置settings.py"></a>4.配置settings.py</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &#x27;rest_framework&#x27;,</span><br><span class="line">    &#x27;api&#x27;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>
<h3 id="5-创建model"><a href="#5-创建model" class="headerlink" title="5.创建model"></a>5.创建model</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="6-创建序列化器"><a href="#6-创建序列化器" class="headerlink" title="6.创建序列化器"></a>6.创建序列化器</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from rest_framework import serializers</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line"></span><br><span class="line">class UserSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [&#x27;id&#x27;, &#x27;username&#x27;, &#x27;email&#x27;]</span><br></pre></td></tr></table></figure></div>
<h3 id="7-创建视图"><a href="#7-创建视图" class="headerlink" title="7.创建视图"></a>7.创建视图</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line"># Create your views here.</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.permissions import IsAuthenticated</span><br><span class="line">from .serializers import UserSerializer</span><br><span class="line"></span><br><span class="line">class UserAPIView(APIView):</span><br><span class="line">    # permission_classes = [IsAuthenticated]</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        users = User.objects.all()</span><br><span class="line">        serializer = UserSerializer(users, many=True)</span><br><span class="line">        return Response(serializer.data)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins自动化部署</title>
    <url>/2023/07/05/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>开发人员提交完代码至版本控制器后，由Jenkins自动获取远程代码，自动打包，然后再自动发布的过程。</p>
<h2 id="下载docker"><a href="#下载docker" class="headerlink" title="下载docker"></a>下载docker</h2><p>前提是linux中已经安装Docker，再执行以下命令：</p>
]]></content>
  </entry>
  <entry>
    <title>chatGPT本地部署</title>
    <url>/2023/07/05/chatGPT%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>此文章是开源作品<a class="link"   href="https://github.com/pengzhile/pandora%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%BD%BF%E7%94%A8" >https://github.com/pengzhile/pandora的介绍使用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>Python&gt;&#x3D;3.7</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install &#x27;pandora-chatgpt[cloud]&#x27;</span><br><span class="line">pandora-cloud</span><br></pre></td></tr></table></figure></div>
<p>浏览器打开<a href="http://127.0.0.1:8018即可访问">http://127.0.0.1:8018即可访问</a><br>1.使用自己的账号密码<br>2.使用token<br>共享Token（ChatGPT4.0多人用，三小时只能问25个问题，限制后可以换个Token）：<br>Token1：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJqYWNvYi5qb25lcy5ldWVjaUByYW1ibGVyLnJ1IiwiZW1haWxfdmVyaWZpZWQiOnRydWV9LCJodHRwczovL2FwaS5vcGVuYWkuY29tL2F1dGgiOnsidXNlcl9pZCI6InVzZXItR2lLdnlaY0FLTWw0ajB2SUdSUE5CQUwyIn0sImlzcyI6Imh0dHBzOi8vYXV0aDAub3BlbmFpLmNvbS8iLCJzdWIiOiJhdXRoMHw2M2VkMDE0ZjY5NjQ3YmJlOWI1YWZmY2EiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjg3NTAyODE0LCJleHAiOjE2ODg3MTI0MTQsImF6cCI6InBkbExJWDJZNzJNSWwycmhMaFRFOVZWOWJOOTA1a0JoIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.wiBlLA8BWkEBxi63l2_f7y5kUTgo3Evca7_W9UGdBplaNWLaW2dI0242WdcUVDC6ZMk2ZTJWdhTrpuqk176_xkLcMetan8UVzaIwIXnoSk8i_blZAteK0kcyJ-cVjR3JRCD00i58fGdLyxZW-AjiGBmhHWH8nwjuQ_I-t8ho0gRE1GWT8YYpb8Zc-cUw2rKPDw1Amub0dI23FvwxgJU9-ay-g2pr6foSBWCea-IhihEyIUM_QO3Q32O3RyjHJjbETFYc6qQkZcHDczYvy1GQPFrOuBJlMnPp2xBxWCVkkvEvSJ78Gv7PgFisl5Kg4tgK9xC6U8ro8awyAKO4VNL0UA</span><br></pre></td></tr></table></figure></div>
<p>:<br>token2：:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ik1UaEVOVUpHTkVNMVFURTRNMEZCTWpkQ05UZzVNRFUxUlRVd1FVSkRNRU13UmtGRVFrRXpSZyJ9.eyJodHRwczovL2FwaS5vcGVuYWkuY29tL3Byb2ZpbGUiOnsiZW1haWwiOiJqYWNvYi5qb25lcy5ldWVjaUByYW1ibGVyLnJ1IiwiZW1haWxfdmVyaWZpZWQiOnRydWV9LCJodHRwczovL2FwaS5vcGVuYWkuY29tL2F1dGgiOnsidXNlcl9pZCI6InVzZXItR2lLdnlaY0FLTWw0ajB2SUdSUE5CQUwyIn0sImlzcyI6Imh0dHBzOi8vYXV0aDAub3BlbmFpLmNvbS8iLCJzdWIiOiJhdXRoMHw2M2VkMDE0ZjY5NjQ3YmJlOWI1YWZmY2EiLCJhdWQiOlsiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIsImh0dHBzOi8vb3BlbmFpLm9wZW5haS5hdXRoMGFwcC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNjg4NDMyNjE0LCJleHAiOjE2ODk2NDIyMTQsImF6cCI6InBkbExJWDJZNzJNSWwycmhMaFRFOVZWOWJOOTA1a0JoIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCBtb2RlbC5yZWFkIG1vZGVsLnJlcXVlc3Qgb3JnYW5pemF0aW9uLnJlYWQgb2ZmbGluZV9hY2Nlc3MifQ.YFpy_ThStbM6aDPukD82WSU-260Erew5f6OBAfOsGxI5mcPKpWdYR7ppgY5G_JFseQ-zGDWDsOHKZYV9EZKRCtb2wMU7hvFxSMojtjvBRm8wvw1-iRazOxhjSyVK4oWX2_v_NTsB202_7Ags8yfv7oCn4V8gWGQ-Tp6sfoSldj6LPbEuSmxj_hsVW8a8YuF_yxOgybenNSXM3DoV47OKAkPsQO5HrGN1dwdfhS822lCQpr_Mv-pQKAo0eYft8pqNOHrcWcNdYPUle0lvxktmgx4LNFONUA2YBalB65zBn-a7oo2NqAKVvf6GYioyDi18wG3t6S8eeU7X8eaZmrck2w</span><br></pre></td></tr></table></figure></div>]]></content>
  </entry>
</search>
